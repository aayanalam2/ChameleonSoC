/home/fizza/OpenFPGA/build/yosys/bin/yosys yosys.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.27+3 (git sha1 b58664d44, gcc 11.3.0-1ubuntu1~22.04 -fPIC -Os)


-- Executing script file `yosys.ys' --

1. Executing Verilog-2005 frontend: ./benchmark/spi_top.v
Parsing Verilog input from `./benchmark/spi_top.v' to AST representation.
Generating RTLIL representation for module `\spi_top'.
Generating RTLIL representation for module `\spi_clgen'.
Generating RTLIL representation for module `\spi_shift_reg'.
Warning: wire '\cpol_0' is assigned in a block at ./benchmark/spi_top.v:817.9-817.23.
Warning: wire '\cpol_1' is assigned in a block at ./benchmark/spi_top.v:818.9-818.23.
Warning: wire '\cpol_0' is assigned in a block at ./benchmark/spi_top.v:822.9-822.20.
Warning: wire '\cpol_1' is assigned in a block at ./benchmark/spi_top.v:823.9-823.20.
Warning: wire '\cpol_0' is assigned in a block at ./benchmark/spi_top.v:830.23-830.34.
Warning: wire '\cpol_1' is assigned in a block at ./benchmark/spi_top.v:840.23-840.34.
Note: Assuming pure combinatorial block at ./benchmark/spi_top.v:584.1-594.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./benchmark/spi_top.v:597.1-617.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
./benchmark/spi_top.v:826: Warning: Identifier `\sclk_out' is implicitly declared.
./benchmark/spi_top.v:828: Warning: Identifier `\cnt' is implicitly declared.
./benchmark/spi_top.v:828: Warning: Identifier `\divider' is implicitly declared.
Generating RTLIL representation for module `\spi_slave'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \spi_top
Used module:     \spi_shift_reg
Used module:     \spi_clgen

2.2. Analyzing design hierarchy..
Top module:  \spi_top
Used module:     \spi_shift_reg
Used module:     \spi_clgen
Removing unused module `\spi_slave'.
Removed 1 unused modules.
Mapping positional arguments of cell spi_top.SR (spi_shift_reg).
Mapping positional arguments of cell spi_top.SC (spi_clgen).

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$./benchmark/spi_top.v:813$131 in module spi_shift_reg.
Marked 4 switch rules as full_case in process $proc$./benchmark/spi_top.v:623$101 in module spi_shift_reg.
Marked 3 switch rules as full_case in process $proc$./benchmark/spi_top.v:597$91 in module spi_shift_reg.
Marked 1 switch rules as full_case in process $proc$./benchmark/spi_top.v:584$86 in module spi_shift_reg.
Marked 1 switch rules as full_case in process $proc$./benchmark/spi_top.v:564$77 in module spi_shift_reg.
Marked 2 switch rules as full_case in process $proc$./benchmark/spi_top.v:541$70 in module spi_shift_reg.
Marked 2 switch rules as full_case in process $proc$./benchmark/spi_top.v:520$68 in module spi_shift_reg.
Marked 1 switch rules as full_case in process $proc$./benchmark/spi_top.v:458$59 in module spi_clgen.
Marked 3 switch rules as full_case in process $proc$./benchmark/spi_top.v:433$54 in module spi_clgen.
Marked 1 switch rules as full_case in process $proc$./benchmark/spi_top.v:356$50 in module spi_top.
Marked 2 switch rules as full_case in process $proc$./benchmark/spi_top.v:329$43 in module spi_top.
Marked 1 switch rules as full_case in process $proc$./benchmark/spi_top.v:289$39 in module spi_top.
Marked 2 switch rules as full_case in process $proc$./benchmark/spi_top.v:275$29 in module spi_top.
Marked 1 switch rules as full_case in process $proc$./benchmark/spi_top.v:262$25 in module spi_top.
Marked 1 switch rules as full_case in process $proc$./benchmark/spi_top.v:253$24 in module spi_top.
Marked 1 switch rules as full_case in process $proc$./benchmark/spi_top.v:224$23 in module spi_top.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 4 redundant assignments.
Promoted 8 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \wb_rst in `\spi_shift_reg.$proc$./benchmark/spi_top.v:813$131'.
Found async reset \wb_rst in `\spi_shift_reg.$proc$./benchmark/spi_top.v:623$101'.
Found async reset \wb_rst in `\spi_shift_reg.$proc$./benchmark/spi_top.v:564$77'.
Found async reset \wb_rst in `\spi_shift_reg.$proc$./benchmark/spi_top.v:541$70'.
Found async reset \wb_rst in `\spi_shift_reg.$proc$./benchmark/spi_top.v:520$68'.
Found async reset \wb_rst in `\spi_clgen.$proc$./benchmark/spi_top.v:458$59'.
Found async reset \wb_rst in `\spi_clgen.$proc$./benchmark/spi_top.v:433$54'.
Found async reset \wb_rst_in in `\spi_top.$proc$./benchmark/spi_top.v:356$50'.
Found async reset \wb_rst_in in `\spi_top.$proc$./benchmark/spi_top.v:329$43'.
Found async reset \wb_rst_in in `\spi_top.$proc$./benchmark/spi_top.v:289$39'.
Found async reset \wb_rst_in in `\spi_top.$proc$./benchmark/spi_top.v:275$29'.
Found async reset \wb_rst_in in `\spi_top.$proc$./benchmark/spi_top.v:262$25'.
Found async reset \wb_rst_in in `\spi_top.$proc$./benchmark/spi_top.v:253$24'.

3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~35 debug messages>

3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\spi_shift_reg.$proc$./benchmark/spi_top.v:813$131'.
     1/2: $0\cpol_1[0:0]
     2/2: $0\cpol_0[0:0]
Creating decoders for process `\spi_shift_reg.$proc$./benchmark/spi_top.v:623$101'.
     1/13: $4$lookahead\master_data$100[7:0]$120
     2/13: $3$bitselwrite$data$./benchmark/spi_top.v:809$66[7:0]$118
     3/13: $3$bitselwrite$mask$./benchmark/spi_top.v:809$65[7:0]$117
     4/13: $3$bitselwrite$sel$./benchmark/spi_top.v:809$67[2:0]$119
     5/13: $3$lookahead\master_data$100[7:0]$116
     6/13: $2$lookahead\master_data$100[7:0]$115
     7/13: $2$bitselwrite$sel$./benchmark/spi_top.v:809$67[2:0]$114
     8/13: $2$bitselwrite$data$./benchmark/spi_top.v:809$66[7:0]$113
     9/13: $2$bitselwrite$mask$./benchmark/spi_top.v:809$65[7:0]$112
    10/13: $1$lookahead\master_data$100[7:0]$109
    11/13: $1$bitselwrite$sel$./benchmark/spi_top.v:809$67[2:0]$108
    12/13: $1$bitselwrite$data$./benchmark/spi_top.v:809$66[7:0]$107
    13/13: $1$bitselwrite$mask$./benchmark/spi_top.v:809$65[7:0]$106
Creating decoders for process `\spi_shift_reg.$proc$./benchmark/spi_top.v:597$91'.
     1/3: $3\rx_bit_pos[3:0]
     2/3: $2\rx_bit_pos[3:0]
     3/3: $1\rx_bit_pos[3:0]
Creating decoders for process `\spi_shift_reg.$proc$./benchmark/spi_top.v:584$86'.
     1/1: $1\tx_bit_pos[3:0]
Creating decoders for process `\spi_shift_reg.$proc$./benchmark/spi_top.v:564$77'.
     1/1: $0\mosi[0:0]
Creating decoders for process `\spi_shift_reg.$proc$./benchmark/spi_top.v:541$70'.
     1/1: $0\tip[0:0]
Creating decoders for process `\spi_shift_reg.$proc$./benchmark/spi_top.v:520$68'.
     1/1: $0\char_count[3:0]
Creating decoders for process `\spi_clgen.$proc$./benchmark/spi_top.v:458$59'.
     1/1: $0\sclk_out[0:0]
Creating decoders for process `\spi_clgen.$proc$./benchmark/spi_top.v:433$54'.
     1/1: $0\cnt[1:0]
Creating decoders for process `\spi_top.$proc$./benchmark/spi_top.v:356$50'.
     1/1: $0\ss[7:0]
Creating decoders for process `\spi_top.$proc$./benchmark/spi_top.v:329$43'.
     1/3: $0\ctrl[13:0] [13:9]
     2/3: $0\ctrl[13:0] [8]
     3/3: $0\ctrl[13:0] [7:0]
Creating decoders for process `\spi_top.$proc$./benchmark/spi_top.v:289$39'.
     1/1: $0\divider[1:0]
Creating decoders for process `\spi_top.$proc$./benchmark/spi_top.v:275$29'.
     1/1: $0\wb_int_o[0:0]
Creating decoders for process `\spi_top.$proc$./benchmark/spi_top.v:262$25'.
     1/1: $0\wb_ack_out[0:0]
Creating decoders for process `\spi_top.$proc$./benchmark/spi_top.v:253$24'.
     1/1: $0\wb_dat_o[31:0]
Creating decoders for process `\spi_top.$proc$./benchmark/spi_top.v:224$23'.
     1/1: $1\wb_temp_dat[31:0]

3.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\spi_shift_reg.\rx_bit_pos' from process `\spi_shift_reg.$proc$./benchmark/spi_top.v:597$91'.
No latch inferred for signal `\spi_shift_reg.\tx_bit_pos' from process `\spi_shift_reg.$proc$./benchmark/spi_top.v:584$86'.
No latch inferred for signal `\spi_top.\wb_temp_dat' from process `\spi_top.$proc$./benchmark/spi_top.v:224$23'.

3.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\spi_shift_reg.\cpol_0' using process `\spi_shift_reg.$proc$./benchmark/spi_top.v:813$131'.
  created $adff cell `$procdff$295' with positive edge clock and positive level reset.
Creating register for signal `\spi_shift_reg.\cpol_1' using process `\spi_shift_reg.$proc$./benchmark/spi_top.v:813$131'.
  created $adff cell `$procdff$296' with positive edge clock and positive level reset.
Creating register for signal `\spi_shift_reg.\master_data' using process `\spi_shift_reg.$proc$./benchmark/spi_top.v:623$101'.
  created $adff cell `$procdff$297' with positive edge clock and positive level reset.
Creating register for signal `\spi_shift_reg.$bitselwrite$mask$./benchmark/spi_top.v:809$65' using process `\spi_shift_reg.$proc$./benchmark/spi_top.v:623$101'.
  created $adff cell `$procdff$298' with positive edge clock and positive level reset.
Creating register for signal `\spi_shift_reg.$bitselwrite$data$./benchmark/spi_top.v:809$66' using process `\spi_shift_reg.$proc$./benchmark/spi_top.v:623$101'.
  created $adff cell `$procdff$299' with positive edge clock and positive level reset.
Creating register for signal `\spi_shift_reg.$bitselwrite$sel$./benchmark/spi_top.v:809$67' using process `\spi_shift_reg.$proc$./benchmark/spi_top.v:623$101'.
  created $adff cell `$procdff$300' with positive edge clock and positive level reset.
Creating register for signal `\spi_shift_reg.$lookahead\master_data$100' using process `\spi_shift_reg.$proc$./benchmark/spi_top.v:623$101'.
  created $adff cell `$procdff$301' with positive edge clock and positive level reset.
Creating register for signal `\spi_shift_reg.\mosi' using process `\spi_shift_reg.$proc$./benchmark/spi_top.v:564$77'.
  created $adff cell `$procdff$302' with positive edge clock and positive level reset.
Creating register for signal `\spi_shift_reg.\tip' using process `\spi_shift_reg.$proc$./benchmark/spi_top.v:541$70'.
  created $adff cell `$procdff$303' with positive edge clock and positive level reset.
Creating register for signal `\spi_shift_reg.\char_count' using process `\spi_shift_reg.$proc$./benchmark/spi_top.v:520$68'.
  created $adff cell `$procdff$304' with positive edge clock and positive level reset.
Creating register for signal `\spi_clgen.\sclk_out' using process `\spi_clgen.$proc$./benchmark/spi_top.v:458$59'.
  created $adff cell `$procdff$305' with positive edge clock and positive level reset.
Creating register for signal `\spi_clgen.\cnt' using process `\spi_clgen.$proc$./benchmark/spi_top.v:433$54'.
  created $adff cell `$procdff$306' with positive edge clock and positive level reset.
Creating register for signal `\spi_top.\ss' using process `\spi_top.$proc$./benchmark/spi_top.v:356$50'.
  created $adff cell `$procdff$307' with positive edge clock and positive level reset.
Creating register for signal `\spi_top.\ctrl' using process `\spi_top.$proc$./benchmark/spi_top.v:329$43'.
  created $adff cell `$procdff$308' with positive edge clock and positive level reset.
Creating register for signal `\spi_top.\divider' using process `\spi_top.$proc$./benchmark/spi_top.v:289$39'.
  created $adff cell `$procdff$309' with positive edge clock and positive level reset.
Creating register for signal `\spi_top.\wb_int_o' using process `\spi_top.$proc$./benchmark/spi_top.v:275$29'.
  created $adff cell `$procdff$310' with positive edge clock and positive level reset.
Creating register for signal `\spi_top.\wb_ack_out' using process `\spi_top.$proc$./benchmark/spi_top.v:262$25'.
  created $adff cell `$procdff$311' with positive edge clock and positive level reset.
Creating register for signal `\spi_top.\wb_dat_o' using process `\spi_top.$proc$./benchmark/spi_top.v:253$24'.
  created $adff cell `$procdff$312' with positive edge clock and positive level reset.

3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 6 empty switches in `\spi_shift_reg.$proc$./benchmark/spi_top.v:813$131'.
Removing empty process `spi_shift_reg.$proc$./benchmark/spi_top.v:813$131'.
Found and cleaned up 3 empty switches in `\spi_shift_reg.$proc$./benchmark/spi_top.v:623$101'.
Removing empty process `spi_shift_reg.$proc$./benchmark/spi_top.v:623$101'.
Found and cleaned up 3 empty switches in `\spi_shift_reg.$proc$./benchmark/spi_top.v:597$91'.
Removing empty process `spi_shift_reg.$proc$./benchmark/spi_top.v:597$91'.
Found and cleaned up 1 empty switch in `\spi_shift_reg.$proc$./benchmark/spi_top.v:584$86'.
Removing empty process `spi_shift_reg.$proc$./benchmark/spi_top.v:584$86'.
Found and cleaned up 1 empty switch in `\spi_shift_reg.$proc$./benchmark/spi_top.v:564$77'.
Removing empty process `spi_shift_reg.$proc$./benchmark/spi_top.v:564$77'.
Found and cleaned up 2 empty switches in `\spi_shift_reg.$proc$./benchmark/spi_top.v:541$70'.
Removing empty process `spi_shift_reg.$proc$./benchmark/spi_top.v:541$70'.
Found and cleaned up 2 empty switches in `\spi_shift_reg.$proc$./benchmark/spi_top.v:520$68'.
Removing empty process `spi_shift_reg.$proc$./benchmark/spi_top.v:520$68'.
Found and cleaned up 3 empty switches in `\spi_clgen.$proc$./benchmark/spi_top.v:458$59'.
Removing empty process `spi_clgen.$proc$./benchmark/spi_top.v:458$59'.
Found and cleaned up 3 empty switches in `\spi_clgen.$proc$./benchmark/spi_top.v:433$54'.
Removing empty process `spi_clgen.$proc$./benchmark/spi_top.v:433$54'.
Found and cleaned up 2 empty switches in `\spi_top.$proc$./benchmark/spi_top.v:356$50'.
Removing empty process `spi_top.$proc$./benchmark/spi_top.v:356$50'.
Found and cleaned up 4 empty switches in `\spi_top.$proc$./benchmark/spi_top.v:329$43'.
Removing empty process `spi_top.$proc$./benchmark/spi_top.v:329$43'.
Found and cleaned up 2 empty switches in `\spi_top.$proc$./benchmark/spi_top.v:289$39'.
Removing empty process `spi_top.$proc$./benchmark/spi_top.v:289$39'.
Found and cleaned up 2 empty switches in `\spi_top.$proc$./benchmark/spi_top.v:275$29'.
Removing empty process `spi_top.$proc$./benchmark/spi_top.v:275$29'.
Removing empty process `spi_top.$proc$./benchmark/spi_top.v:262$25'.
Removing empty process `spi_top.$proc$./benchmark/spi_top.v:253$24'.
Found and cleaned up 1 empty switch in `\spi_top.$proc$./benchmark/spi_top.v:224$23'.
Removing empty process `spi_top.$proc$./benchmark/spi_top.v:224$23'.
Cleaned up 35 empty switches.

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_shift_reg.
<suppressed ~4 debug messages>
Optimizing module spi_clgen.
<suppressed ~1 debug messages>
Optimizing module spi_top.
<suppressed ~2 debug messages>

4. Executing TECHMAP pass (map to technology primitives).

4.1. Executing Verilog-2005 frontend: /home/fizza/OpenFPGA/build/yosys/bin/../share/yosys/adff2dff.v
Parsing Verilog input from `/home/fizza/OpenFPGA/build/yosys/bin/../share/yosys/adff2dff.v' to AST representation.
Generating RTLIL representation for module `\adff2dff'.
Successfully finished Verilog frontend.

4.2. Continuing TECHMAP pass.
Using template $paramod$6c605d012d13a1d33b039cb0cf30d7b42e4a1e58\adff2dff for cells of type $adff.
Using template $paramod$4a72a0468fb4fdcec292c9e371db9d532d892481\adff2dff for cells of type $adff.
Using template $paramod$7ad256748f7a95fe5e7e4769b672ff20093b04f8\adff2dff for cells of type $adff.
Using template $paramod$bf436af06b2d6e99fec6f0e95808ac9dabeedabb\adff2dff for cells of type $adff.
Using template $paramod$5c70f72a43d0a751f02f3a45d2b5f8be312c9b6c\adff2dff for cells of type $adff.
Using template $paramod$18c71e298bc43f8714c3c18ec9cfd198ba7020fd\adff2dff for cells of type $adff.
Using template $paramod$bd945bdc79e584e72bb18948b87b39720cd8006b\adff2dff for cells of type $adff.
Using template $paramod$922a1f8133028c47b3af2f0b93ca5697d9193ecc\adff2dff for cells of type $adff.
Using template $paramod$cf873983f3931103641c9a819fdf645053da3e7b\adff2dff for cells of type $adff.
No more expansions possible.
<suppressed ~831 debug messages>

5. Executing FLATTEN pass (flatten design).
Deleting now unused module spi_shift_reg.
Deleting now unused module spi_clgen.
<suppressed ~2 debug messages>

6. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.
<suppressed ~7 debug messages>

7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..
Removed 14 unused cells and 220 unused wires.
<suppressed ~17 debug messages>

8. Executing CHECK pass (checking for obvious problems).
Checking module spi_top...
Warning: Wire spi_top.\SR.sclk_out is used but has no driver.
Warning: Wire spi_top.\SR.divider is used but has no driver.
Warning: Wire spi_top.\SR.cnt is used but has no driver.
Found and reported 3 problems.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
<suppressed ~93 debug messages>
Removed a total of 31 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $flatten\SR.$procmux$174.
    dead port 2/2 on $mux $flatten\SR.$procmux$198.
    dead port 1/2 on $mux $flatten\SR.$procmux$216.
    dead port 2/2 on $mux $flatten\SR.$procmux$222.
Removed 4 multiplexer ports.
<suppressed ~18 debug messages>

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_top.
    New ctrl vector for $pmux cell $procmux$287: { $eq$./benchmark/spi_top.v:218$12_Y $auto$opt_reduce.cc:134:opt_pmux$380 $eq$./benchmark/spi_top.v:216$6_Y $eq$./benchmark/spi_top.v:215$3_Y $eq$./benchmark/spi_top.v:217$9_Y }
  Optimizing cells in module \spi_top.
Performed a total of 1 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

9.6. Executing OPT_DFF pass (perform DFF optimizations).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..
Removed 0 unused cells and 36 unused wires.
<suppressed ~1 debug messages>

9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

9.9. Rerunning OPT passes. (Maybe there is more to do..)

9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_top.
Performed a total of 0 changes.

9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

9.13. Executing OPT_DFF pass (perform DFF optimizations).

9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

9.16. Finished OPT passes. (There is nothing left to do.)

10. Executing FSM pass (extract and optimize FSM).

10.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking spi_top.divider as FSM state register:
    Users of register don't seem to benefit from recoding.

10.2. Executing FSM_EXTRACT pass (extracting FSM from design).

10.3. Executing FSM_OPT pass (simple optimizations of FSMs).

10.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

10.5. Executing FSM_OPT pass (simple optimizations of FSMs).

10.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

10.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

10.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_top.
Performed a total of 0 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

11.6. Executing OPT_DFF pass (perform DFF optimizations).

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

11.9. Finished OPT passes. (There is nothing left to do.)

12. Executing WREDUCE pass (reducing word size of cells).
Removed top 3 bits (of 4) from port Y of cell spi_top.$and$./benchmark/spi_top.v:198$1 ($and).
Removed top 3 bits (of 4) from port A of cell spi_top.$and$./benchmark/spi_top.v:198$1 ($and).
Removed top 3 bits (of 4) from port B of cell spi_top.$and$./benchmark/spi_top.v:198$1 ($and).
Removed top 2 bits (of 5) from port B of cell spi_top.$eq$./benchmark/spi_top.v:219$15 ($eq).
Removed cell spi_top.$and$./benchmark/spi_top.v:219$16 ($and).
Removed top 1 bits (of 5) from port B of cell spi_top.$eq$./benchmark/spi_top.v:220$18 ($eq).
Removed cell spi_top.$and$./benchmark/spi_top.v:220$19 ($and).
Removed top 1 bits (of 5) from port B of cell spi_top.$eq$./benchmark/spi_top.v:221$21 ($eq).
Removed cell spi_top.$and$./benchmark/spi_top.v:221$22 ($and).
Removed top 7 bits (of 8) from port B of cell spi_top.$or$./benchmark/spi_top.v:338$47 ($or).
Removed top 31 bits (of 32) from port B of cell spi_top.$flatten\SC.$add$./benchmark/spi_top.v:447$57 ($add).
Removed top 30 bits (of 32) from port Y of cell spi_top.$flatten\SC.$add$./benchmark/spi_top.v:447$57 ($add).
Removed top 31 bits (of 32) from port B of cell spi_top.$flatten\SC.$add$./benchmark/spi_top.v:441$55 ($add).
Removed top 29 bits (of 32) from port Y of cell spi_top.$flatten\SC.$add$./benchmark/spi_top.v:441$55 ($add).
Removed top 1 bits (of 4) from mux cell spi_top.$flatten\SR.$procmux$228 ($mux).
Removed top 1 bits (of 4) from mux cell spi_top.$flatten\SR.$procmux$225 ($mux).
Removed top 1 bits (of 4) from mux cell spi_top.$flatten\SR.$procmux$220 ($mux).
Removed top 1 bits (of 4) from mux cell spi_top.$flatten\SR.$procmux$213 ($mux).
Removed top 28 bits (of 32) from port A of cell spi_top.$flatten\SR.$neg$./benchmark/spi_top.v:0$122 ($neg).
Converting cell spi_top.$flatten\SR.$neg$./benchmark/spi_top.v:0$122 ($neg) from signed to unsigned.
Removed top 1 bits (of 4) from port A of cell spi_top.$flatten\SR.$neg$./benchmark/spi_top.v:0$122 ($neg).
Removed top 28 bits (of 32) from port A of cell spi_top.$flatten\SR.$sub$./benchmark/spi_top.v:602$95 ($sub).
Removed top 29 bits (of 32) from port Y of cell spi_top.$flatten\SR.$sub$./benchmark/spi_top.v:602$95 ($sub).
Removed top 1 bits (of 4) from port A of cell spi_top.$flatten\SR.$sub$./benchmark/spi_top.v:602$95 ($sub).
Removed top 29 bits (of 32) from port B of cell spi_top.$flatten\SR.$sub$./benchmark/spi_top.v:602$95 ($sub).
Removed top 31 bits (of 32) from port B of cell spi_top.$flatten\SR.$add$./benchmark/spi_top.v:602$94 ($add).
Removed top 29 bits (of 32) from port Y of cell spi_top.$flatten\SR.$add$./benchmark/spi_top.v:602$94 ($add).
Removed top 1 bits (of 4) from port A of cell spi_top.$flatten\SR.$add$./benchmark/spi_top.v:602$94 ($add).
Removed top 1 bits (of 4) from port Y of cell spi_top.$flatten\SR.$sub$./benchmark/spi_top.v:588$89 ($sub).
Removed top 1 bits (of 4) from port A of cell spi_top.$flatten\SR.$sub$./benchmark/spi_top.v:588$89 ($sub).
Removed top 1 bits (of 4) from port B of cell spi_top.$flatten\SR.$sub$./benchmark/spi_top.v:588$89 ($sub).
Removed cell spi_top.$flatten\SR.$not$./benchmark/spi_top.v:588$88 ($not).
Removed top 31 bits (of 32) from port B of cell spi_top.$flatten\SR.$sub$./benchmark/spi_top.v:532$69 ($sub).
Removed top 28 bits (of 32) from port Y of cell spi_top.$flatten\SR.$sub$./benchmark/spi_top.v:532$69 ($sub).
Removed top 29 bits (of 32) from wire spi_top.$flatten\SC.$add$./benchmark/spi_top.v:441$55_Y.
Removed top 30 bits (of 32) from wire spi_top.$flatten\SC.$add$./benchmark/spi_top.v:447$57_Y.
Removed top 1 bits (of 4) from wire spi_top.$flatten\SR.$2\rx_bit_pos[3:0].
Removed top 1 bits (of 4) from wire spi_top.$flatten\SR.$3\rx_bit_pos[3:0].
Removed top 29 bits (of 32) from wire spi_top.$flatten\SR.$add$./benchmark/spi_top.v:602$94_Y.
Removed top 25 bits (of 32) from wire spi_top.$flatten\SR.$neg$./benchmark/spi_top.v:0$122_Y.
Removed top 1 bits (of 8) from wire spi_top.$flatten\SR.$shift$./benchmark/spi_top.v:0$123_Y.
Removed top 1 bits (of 8) from wire spi_top.$flatten\SR.$shift$./benchmark/spi_top.v:0$127_Y.
Removed top 28 bits (of 32) from wire spi_top.$flatten\SR.$sub$./benchmark/spi_top.v:532$69_Y.
Removed top 3 bits (of 4) from wire spi_top.$flatten\SR.$sub$./benchmark/spi_top.v:588$89_Y.
Removed top 3 bits (of 4) from wire spi_top.spi_tx_sel.

13. Executing PEEPOPT pass (run peephole optimizers).

14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..
Removed 1 unused cells and 13 unused wires.
<suppressed ~2 debug messages>

15. Executing OPT pass (performing simple optimizations).

15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_top.
Performed a total of 0 changes.

15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

15.6. Executing OPT_DFF pass (perform DFF optimizations).

15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

15.9. Finished OPT passes. (There is nothing left to do.)

16. Executing MEMORY pass.

16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

18. Executing OPT pass (performing simple optimizations).

18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.
<suppressed ~24 debug messages>

18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

18.3. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $flatten\SR.$techmap$procdff$295.$procdff$343 ($dff) from module spi_top.

18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

18.5. Rerunning OPT passes. (Removed registers in this run.)

18.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.
<suppressed ~12 debug messages>

18.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

18.8. Executing OPT_DFF pass (perform DFF optimizations).

18.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..
Removed 19 unused cells and 29 unused wires.
<suppressed ~23 debug messages>

18.10. Finished fast OPT passes.

19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

20. Executing OPT pass (performing simple optimizations).

20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.
<suppressed ~5 debug messages>

20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_top.
    Consolidated identical input bits for $pmux cell $procmux$287:
      Old ports: A={ 24'000000000000000000000000 \SR.master_data }, B={ 50'00000000000000000000000000000000000000000000000000 \ctrl 30'000000000000000000000000000000 \divider 24'000000000000000000000000 \ss }, Y=\wb_temp_dat
      New ports: A={ 6'000000 \SR.master_data }, B={ 14'00000000000000 \ctrl 12'000000000000 \divider 6'000000 \ss }, Y=\wb_temp_dat [13:0]
      New connections: \wb_temp_dat [31:14] = 18'000000000000000000
  Optimizing cells in module \spi_top.
    Consolidated identical input bits for $mux cell $techmap$procdff$312.$procmux$348:
      Old ports: A=\wb_temp_dat, B=0, Y=$procdff$312.NEXT_Q
      New ports: A=\wb_temp_dat [13:0], B=14'00000000000000, Y=$procdff$312.NEXT_Q [13:0]
      New connections: $procdff$312.NEXT_Q [31:14] = 18'000000000000000000
  Optimizing cells in module \spi_top.
Performed a total of 2 changes.

20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

20.6. Executing OPT_SHARE pass.

20.7. Executing OPT_DFF pass (perform DFF optimizations).

20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

20.10. Rerunning OPT passes. (Maybe there is more to do..)

20.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

20.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_top.
Performed a total of 0 changes.

20.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

20.14. Executing OPT_SHARE pass.

20.15. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 14 on $techmap$procdff$312.$procdff$350 ($dff) from module spi_top.
Setting constant 0-bit at position 15 on $techmap$procdff$312.$procdff$350 ($dff) from module spi_top.
Setting constant 0-bit at position 16 on $techmap$procdff$312.$procdff$350 ($dff) from module spi_top.
Setting constant 0-bit at position 17 on $techmap$procdff$312.$procdff$350 ($dff) from module spi_top.
Setting constant 0-bit at position 18 on $techmap$procdff$312.$procdff$350 ($dff) from module spi_top.
Setting constant 0-bit at position 19 on $techmap$procdff$312.$procdff$350 ($dff) from module spi_top.
Setting constant 0-bit at position 20 on $techmap$procdff$312.$procdff$350 ($dff) from module spi_top.
Setting constant 0-bit at position 21 on $techmap$procdff$312.$procdff$350 ($dff) from module spi_top.
Setting constant 0-bit at position 22 on $techmap$procdff$312.$procdff$350 ($dff) from module spi_top.
Setting constant 0-bit at position 23 on $techmap$procdff$312.$procdff$350 ($dff) from module spi_top.
Setting constant 0-bit at position 24 on $techmap$procdff$312.$procdff$350 ($dff) from module spi_top.
Setting constant 0-bit at position 25 on $techmap$procdff$312.$procdff$350 ($dff) from module spi_top.
Setting constant 0-bit at position 26 on $techmap$procdff$312.$procdff$350 ($dff) from module spi_top.
Setting constant 0-bit at position 27 on $techmap$procdff$312.$procdff$350 ($dff) from module spi_top.
Setting constant 0-bit at position 28 on $techmap$procdff$312.$procdff$350 ($dff) from module spi_top.
Setting constant 0-bit at position 29 on $techmap$procdff$312.$procdff$350 ($dff) from module spi_top.
Setting constant 0-bit at position 30 on $techmap$procdff$312.$procdff$350 ($dff) from module spi_top.
Setting constant 0-bit at position 31 on $techmap$procdff$312.$procdff$350 ($dff) from module spi_top.

20.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

20.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

20.18. Rerunning OPT passes. (Maybe there is more to do..)

20.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

20.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_top.
Performed a total of 0 changes.

20.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

20.22. Executing OPT_SHARE pass.

20.23. Executing OPT_DFF pass (perform DFF optimizations).

20.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

20.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

20.26. Finished OPT passes. (There is nothing left to do.)

21. Executing TECHMAP pass (map to technology primitives).

21.1. Executing Verilog-2005 frontend: /home/fizza/OpenFPGA/build/yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/fizza/OpenFPGA/build/yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$bb990411fd15fdc1f86721cf4a55c97ef699e08e\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $logic_or.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=2:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=2:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=2:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=3:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=3:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=3:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$b3c20b05d9b1fc2c940ef2f6c917486aead042e8\_90_alu for cells of type $alu.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~503 debug messages>

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.
<suppressed ~129 debug messages>

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
<suppressed ~63 debug messages>
Removed a total of 21 cells.

22.3. Executing OPT_DFF pass (perform DFF optimizations).

22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..
Removed 5 unused cells and 161 unused wires.
<suppressed ~6 debug messages>

22.5. Finished fast OPT passes.

23. Executing ABC pass (technology mapping using ABC).

23.1. Extracting gate netlist of module `\spi_top' to `<abc-temp-dir>/input.blif'..
Extracted 282 gates and 352 wires to a netlist network with 68 inputs and 65 outputs.

23.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

23.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       83
ABC RESULTS:        internal signals:      219
ABC RESULTS:           input signals:       68
ABC RESULTS:          output signals:       65
Removing temp directory.

24. Executing SYNTH pass.

24.1. Executing HIERARCHY pass (managing design hierarchy).

24.1.1. Analyzing design hierarchy..
Top module:  \spi_top

24.1.2. Analyzing design hierarchy..
Top module:  \spi_top
Removed 0 unused modules.

24.2. Printing statistics.

=== spi_top ===

   Number of wires:                312
   Number of wire bits:            746
   Number of public wires:          69
   Number of public wire bits:     270
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                140
     $_DFF_P_                       57
     $lut                           83

24.3. Executing CHECK pass (checking for obvious problems).
Checking module spi_top...
Found and reported 0 problems.

25. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..
Removed 0 unused cells and 253 unused wires.
<suppressed ~41 debug messages>

26. Executing BLIF backend.

Warnings: 12 unique messages, 12 total
End of script. Logfile hash: f24eeb9e05, CPU: user 0.40s system 0.01s, MEM: 17.17 MB peak
Yosys 0.27+3 (git sha1 b58664d44, gcc 11.3.0-1ubuntu1~22.04 -fPIC -Os)
Time spent: 35% 1x abc (0 sec), 19% 29x opt_expr (0 sec), ...
0