/home/fizza/OpenFPGA/build/yosys/bin/yosys yosys.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.27+3 (git sha1 b58664d44, gcc 11.3.0-1ubuntu1~22.04 -fPIC -Os)


-- Executing script file `yosys.ys' --

1. Executing Verilog-2005 frontend: ./benchmark/ch_intrinsics.v
Parsing Verilog input from `./benchmark/ch_intrinsics.v' to AST representation.
Generating RTLIL representation for module `\memory_controller'.
Note: Assuming pure combinatorial block at ./benchmark/ch_intrinsics.v:47.1-65.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\memset'.
Note: Assuming pure combinatorial block at ./benchmark/ch_intrinsics.v:276.1-287.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\single_port_ram'.
./benchmark/ch_intrinsics.v:308: Warning: Identifier `\wen' is implicitly declared.
./benchmark/ch_intrinsics.v:312: Warning: Identifier `\ren' is implicitly declared.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /home/fizza/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_cell_sim.v
Parsing Verilog input from `/home/fizza/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_cell_sim.v' to AST representation.
Generating RTLIL representation for module `\dpram_1024x8_core'.
Generating RTLIL representation for module `\dpram_1024x8'.
Generating RTLIL representation for module `\mult_36'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \memset
Used module:     \memory_controller
Used module:         \single_port_ram

3.2. Analyzing design hierarchy..
Top module:  \memset
Used module:     \memory_controller
Used module:         \single_port_ram
Removed 0 unused modules.
Mapping positional arguments of cell memset.memtroll (memory_controller).

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$./benchmark/ch_intrinsics.v:307$18 in module single_port_ram.
Marked 1 switch rules as full_case in process $proc$./benchmark/ch_intrinsics.v:276$16 in module memset.
Marked 5 switch rules as full_case in process $proc$./benchmark/ch_intrinsics.v:144$8 in module memset.
Marked 2 switch rules as full_case in process $proc$./benchmark/ch_intrinsics.v:47$7 in module memory_controller.
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 11 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~11 debug messages>

4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\single_port_ram.$proc$./benchmark/ch_intrinsics.v:307$18'.
     1/4: $1$memwr$\ram$./benchmark/ch_intrinsics.v:309$17_EN[7:0]$24
     2/4: $1$memwr$\ram$./benchmark/ch_intrinsics.v:309$17_DATA[7:0]$23
     3/4: $1$memwr$\ram$./benchmark/ch_intrinsics.v:309$17_ADDR[4:0]$22
     4/4: $0\internal[7:0]
Creating decoders for process `\memset.$proc$./benchmark/ch_intrinsics.v:276$16'.
     1/3: $1\memory_controller_in[31:0]
     2/3: $1\memory_controller_write_enable[0:0]
     3/3: $1\memory_controller_address[31:0]
Creating decoders for process `\memset.$proc$./benchmark/ch_intrinsics.v:144$8'.
     1/13: $0\exitcond[0:0]
     2/13: $0\indvar_next[31:0]
     3/13: $0\s_07[31:0]
     4/13: $0\scevgep[31:0]
     5/13: $0\var0[31:0]
     6/13: $0\var2[0:0]
     7/13: $0\tmp8[31:0]
     8/13: $0\tmp[31:0]
     9/13: $0\var1[0:0]
    10/13: $0\indvar[31:0]
    11/13: $0\cur_state[3:0]
    12/13: $0\finish[0:0]
    13/13: $0\return_val[31:0]
Creating decoders for process `\memory_controller.$proc$./benchmark/ch_intrinsics.v:47$7'.
     1/4: $1\memory_controller_out[31:0]
     2/4: $1\str_in[7:0]
     3/4: $1\str_write_enable[0:0]
     4/4: $1\str_address[4:0]
Creating decoders for process `\memory_controller.$proc$./benchmark/ch_intrinsics.v:45$6'.

4.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\memset.\memory_controller_address' from process `\memset.$proc$./benchmark/ch_intrinsics.v:276$16'.
No latch inferred for signal `\memset.\memory_controller_write_enable' from process `\memset.$proc$./benchmark/ch_intrinsics.v:276$16'.
No latch inferred for signal `\memset.\memory_controller_in' from process `\memset.$proc$./benchmark/ch_intrinsics.v:276$16'.
No latch inferred for signal `\memory_controller.\memory_controller_out' from process `\memory_controller.$proc$./benchmark/ch_intrinsics.v:47$7'.
No latch inferred for signal `\memory_controller.\str_address' from process `\memory_controller.$proc$./benchmark/ch_intrinsics.v:47$7'.
No latch inferred for signal `\memory_controller.\str_write_enable' from process `\memory_controller.$proc$./benchmark/ch_intrinsics.v:47$7'.
No latch inferred for signal `\memory_controller.\str_in' from process `\memory_controller.$proc$./benchmark/ch_intrinsics.v:47$7'.

4.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\single_port_ram.\internal' using process `\single_port_ram.$proc$./benchmark/ch_intrinsics.v:307$18'.
  created $dff cell `$procdff$211' with positive edge clock.
Creating register for signal `\single_port_ram.$memwr$\ram$./benchmark/ch_intrinsics.v:309$17_ADDR' using process `\single_port_ram.$proc$./benchmark/ch_intrinsics.v:307$18'.
  created $dff cell `$procdff$212' with positive edge clock.
Creating register for signal `\single_port_ram.$memwr$\ram$./benchmark/ch_intrinsics.v:309$17_DATA' using process `\single_port_ram.$proc$./benchmark/ch_intrinsics.v:307$18'.
  created $dff cell `$procdff$213' with positive edge clock.
Creating register for signal `\single_port_ram.$memwr$\ram$./benchmark/ch_intrinsics.v:309$17_EN' using process `\single_port_ram.$proc$./benchmark/ch_intrinsics.v:307$18'.
  created $dff cell `$procdff$214' with positive edge clock.
Creating register for signal `\memset.\return_val' using process `\memset.$proc$./benchmark/ch_intrinsics.v:144$8'.
  created $dff cell `$procdff$215' with positive edge clock.
Creating register for signal `\memset.\finish' using process `\memset.$proc$./benchmark/ch_intrinsics.v:144$8'.
  created $dff cell `$procdff$216' with positive edge clock.
Creating register for signal `\memset.\cur_state' using process `\memset.$proc$./benchmark/ch_intrinsics.v:144$8'.
  created $dff cell `$procdff$217' with positive edge clock.
Creating register for signal `\memset.\indvar' using process `\memset.$proc$./benchmark/ch_intrinsics.v:144$8'.
  created $dff cell `$procdff$218' with positive edge clock.
Creating register for signal `\memset.\var1' using process `\memset.$proc$./benchmark/ch_intrinsics.v:144$8'.
  created $dff cell `$procdff$219' with positive edge clock.
Creating register for signal `\memset.\tmp' using process `\memset.$proc$./benchmark/ch_intrinsics.v:144$8'.
  created $dff cell `$procdff$220' with positive edge clock.
Creating register for signal `\memset.\tmp8' using process `\memset.$proc$./benchmark/ch_intrinsics.v:144$8'.
  created $dff cell `$procdff$221' with positive edge clock.
Creating register for signal `\memset.\var2' using process `\memset.$proc$./benchmark/ch_intrinsics.v:144$8'.
  created $dff cell `$procdff$222' with positive edge clock.
Creating register for signal `\memset.\var0' using process `\memset.$proc$./benchmark/ch_intrinsics.v:144$8'.
  created $dff cell `$procdff$223' with positive edge clock.
Creating register for signal `\memset.\scevgep' using process `\memset.$proc$./benchmark/ch_intrinsics.v:144$8'.
  created $dff cell `$procdff$224' with positive edge clock.
Creating register for signal `\memset.\s_07' using process `\memset.$proc$./benchmark/ch_intrinsics.v:144$8'.
  created $dff cell `$procdff$225' with positive edge clock.
Creating register for signal `\memset.\indvar_next' using process `\memset.$proc$./benchmark/ch_intrinsics.v:144$8'.
  created $dff cell `$procdff$226' with positive edge clock.
Creating register for signal `\memset.\exitcond' using process `\memset.$proc$./benchmark/ch_intrinsics.v:144$8'.
  created $dff cell `$procdff$227' with positive edge clock.
Creating register for signal `\memory_controller.\prevTag' using process `\memory_controller.$proc$./benchmark/ch_intrinsics.v:45$6'.
  created $dff cell `$procdff$228' with positive edge clock.

4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\single_port_ram.$proc$./benchmark/ch_intrinsics.v:307$18'.
Removing empty process `single_port_ram.$proc$./benchmark/ch_intrinsics.v:307$18'.
Found and cleaned up 1 empty switch in `\memset.$proc$./benchmark/ch_intrinsics.v:276$16'.
Removing empty process `memset.$proc$./benchmark/ch_intrinsics.v:276$16'.
Found and cleaned up 6 empty switches in `\memset.$proc$./benchmark/ch_intrinsics.v:144$8'.
Removing empty process `memset.$proc$./benchmark/ch_intrinsics.v:144$8'.
Found and cleaned up 2 empty switches in `\memory_controller.$proc$./benchmark/ch_intrinsics.v:47$7'.
Removing empty process `memory_controller.$proc$./benchmark/ch_intrinsics.v:47$7'.
Removing empty process `memory_controller.$proc$./benchmark/ch_intrinsics.v:45$6'.
Cleaned up 11 empty switches.

4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module single_port_ram.
Optimizing module memset.
<suppressed ~6 debug messages>
Optimizing module memory_controller.
<suppressed ~8 debug messages>

5. Executing FLATTEN pass (flatten design).
Deleting now unused module single_port_ram.
Deleting now unused module memory_controller.
<suppressed ~2 debug messages>

6. Executing TRIBUF pass.

7. Executing OPT_EXPR pass (perform const folding).
Optimizing module memset.

8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memset..
Removed 13 unused cells and 83 unused wires.
<suppressed ~17 debug messages>

9. Executing DEMINOUT pass (demote inout ports to input or output).

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module memset.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memset'.
<suppressed ~51 debug messages>
Removed a total of 17 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memset..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memset.
    Consolidated identical input bits for $mux cell $flatten\memtroll.\_str.$procmux$28:
      Old ports: A=8'00000000, B=8'11111111, Y=$flatten\memtroll.\_str.$0$memwr$\ram$./benchmark/ch_intrinsics.v:309$17_EN[7:0]$21
      New ports: A=1'0, B=1'1, Y=$flatten\memtroll.\_str.$0$memwr$\ram$./benchmark/ch_intrinsics.v:309$17_EN[7:0]$21 [0]
      New connections: $flatten\memtroll.\_str.$0$memwr$\ram$./benchmark/ch_intrinsics.v:309$17_EN[7:0]$21 [7:1] = { $flatten\memtroll.\_str.$0$memwr$\ram$./benchmark/ch_intrinsics.v:309$17_EN[7:0]$21 [0] $flatten\memtroll.\_str.$0$memwr$\ram$./benchmark/ch_intrinsics.v:309$17_EN[7:0]$21 [0] $flatten\memtroll.\_str.$0$memwr$\ram$./benchmark/ch_intrinsics.v:309$17_EN[7:0]$21 [0] $flatten\memtroll.\_str.$0$memwr$\ram$./benchmark/ch_intrinsics.v:309$17_EN[7:0]$21 [0] $flatten\memtroll.\_str.$0$memwr$\ram$./benchmark/ch_intrinsics.v:309$17_EN[7:0]$21 [0] $flatten\memtroll.\_str.$0$memwr$\ram$./benchmark/ch_intrinsics.v:309$17_EN[7:0]$21 [0] $flatten\memtroll.\_str.$0$memwr$\ram$./benchmark/ch_intrinsics.v:309$17_EN[7:0]$21 [0] }
  Optimizing cells in module \memset.
Performed a total of 1 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memset'.
Removed a total of 0 cells.

10.6. Executing OPT_DFF pass (perform DFF optimizations).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memset..
Removed 0 unused cells and 17 unused wires.
<suppressed ~1 debug messages>

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module memset.
<suppressed ~1 debug messages>

10.9. Rerunning OPT passes. (Maybe there is more to do..)

10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memset..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memset.
Performed a total of 0 changes.

10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memset'.
Removed a total of 0 cells.

10.13. Executing OPT_DFF pass (perform DFF optimizations).

10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memset..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module memset.

10.16. Rerunning OPT passes. (Maybe there is more to do..)

10.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memset..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

10.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memset.
Performed a total of 0 changes.

10.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memset'.
Removed a total of 0 cells.

10.20. Executing OPT_DFF pass (perform DFF optimizations).

10.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memset..

10.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module memset.

10.23. Finished OPT passes. (There is nothing left to do.)

11. Executing OPT_EXPR pass (perform const folding).
Optimizing module memset.

12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memset..

13. Executing CHECK pass (checking for obvious problems).
Checking module memset...
Warning: Wire memset.\memtroll._str.ren is used but has no driver.
Warning: Wire memset.\memtroll._str.wen is used but has no driver.
Found and reported 2 problems.

14. Executing OPT pass (performing simple optimizations).

14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module memset.

14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memset'.
Removed a total of 0 cells.

14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memset..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memset.
Performed a total of 0 changes.

14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memset'.
Removed a total of 0 cells.

14.6. Executing OPT_DFF pass (perform DFF optimizations).

14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memset..

14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module memset.

14.9. Finished OPT passes. (There is nothing left to do.)

15. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 4) from port B of cell memset.$procmux$106_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell memset.$procmux$143_CMP0 ($eq).
Removed top 1 bits (of 4) from mux cell memset.$procmux$160 ($mux).
Removed top 1 bits (of 4) from mux cell memset.$procmux$169 ($mux).
Removed top 1 bits (of 4) from port B of cell memset.$procmux$171_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell memset.$procmux$173_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell memset.$procmux$174_CMP0 ($eq).
Removed top 2 bits (of 4) from mux cell memset.$procmux$176 ($mux).
Removed top 2 bits (of 4) from port B of cell memset.$procmux$178_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell memset.$procmux$180_CMP0 ($eq).
Removed top 3 bits (of 4) from mux cell memset.$procmux$182 ($mux).
Removed top 1 bits (of 4) from wire memset.$procmux$160_Y.
Removed top 1 bits (of 4) from wire memset.$procmux$169_Y.
Removed top 2 bits (of 4) from wire memset.$procmux$176_Y.
Removed top 3 bits (of 4) from wire memset.$procmux$182_Y.

16. Executing PEEPOPT pass (run peephole optimizers).

17. Executing PMUXTREE pass.

18. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memset..
Removed 6 unused cells and 13 unused wires.
<suppressed ~7 debug messages>

19. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\memtroll._str.ram'[0] in module `\memset': FF found, but with a mux select that doesn't seem to correspond to transparency logic.
Checking read port address `\memtroll._str.ram'[0] in module `\memset': no address FF found.

20. Executing WREDUCE pass (reducing word size of cells).

21. Executing TECHMAP pass (map to technology primitives).

21.1. Executing Verilog-2005 frontend: /home/fizza/OpenFPGA/build/yosys/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/home/fizza/OpenFPGA/build/yosys/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

21.2. Executing Verilog-2005 frontend: /home/fizza/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_dsp_map.v
Parsing Verilog input from `/home/fizza/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_dsp_map.v' to AST representation.
Generating RTLIL representation for module `\mult_36x36'.
Successfully finished Verilog frontend.

21.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

22. Executing OPT_EXPR pass (perform const folding).

23. Executing WREDUCE pass (reducing word size of cells).
Warning: Selection "Extract" did not match any module.
Warning: Selection "arithmetic" did not match any module.
Warning: Selection "functions" did not match any module.

24. Executing TECHMAP pass (map to technology primitives).

24.1. Executing Verilog-2005 frontend: /home/fizza/OpenFPGA/build/yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/fizza/OpenFPGA/build/yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

24.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $dff.
No more expansions possible.
<suppressed ~170 debug messages>

25. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module memset:
  created 0 $alu and 0 $macc cells.

26. Executing SHARE pass (SAT-based resource sharing).

27. Executing OPT pass (performing simple optimizations).

27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module memset.
<suppressed ~442 debug messages>

27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memset'.
<suppressed ~231 debug messages>
Removed a total of 77 cells.

27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memset..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memset.
Performed a total of 0 changes.

27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memset'.
Removed a total of 0 cells.

27.6. Executing OPT_DFF pass (perform DFF optimizations).

27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memset..
Removed 1 unused cells and 80 unused wires.
<suppressed ~2 debug messages>

27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module memset.

27.9. Rerunning OPT passes. (Maybe there is more to do..)

27.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memset..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

27.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memset.
Performed a total of 0 changes.

27.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memset'.
Removed a total of 0 cells.

27.13. Executing OPT_DFF pass (perform DFF optimizations).

27.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memset..

27.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module memset.

27.16. Finished OPT passes. (There is nothing left to do.)

28. Executing FSM pass (extract and optimize FSM).

28.1. Executing FSM_DETECT pass (finding FSMs in design).

28.2. Executing FSM_EXTRACT pass (extracting FSM from design).

28.3. Executing FSM_OPT pass (simple optimizations of FSMs).

28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memset..

28.5. Executing FSM_OPT pass (simple optimizations of FSMs).

28.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

28.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

28.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

29. Executing OPT pass (performing simple optimizations).

29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module memset.

29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memset'.
Removed a total of 0 cells.

29.3. Executing OPT_DFF pass (perform DFF optimizations).

29.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memset..

29.5. Finished fast OPT passes.

30. Executing MEMORY pass.

30.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

30.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

30.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing memset.memtroll._str.ram write port 0.

30.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

30.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\memtroll._str.ram'[0] in module `\memset': no output FF found.
Checking read port address `\memtroll._str.ram'[0] in module `\memset': no address FF found.

30.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memset..

30.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

30.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

30.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memset..

30.10. Executing MEMORY_COLLECT pass (generating $mem cells).

31. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memset..

32. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing memset.memtroll._str.ram:
  Properties: ports=2 bits=256 rports=1 wports=1 dbits=8 abits=5 words=32
  Checking rule #1 for bram type $__MY_DPRAM_1024x8 (variant 1):
    Bram geometry: abits=10 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__MY_DPRAM_1024x8: awaste=992 dwaste=0 bwaste=7936 waste=7936 efficiency=3
    Rule #1 for bram type $__MY_DPRAM_1024x8 (variant 1) accepted.
    Mapping to bram type $__MY_DPRAM_1024x8 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port A1.
      Read port #0 is in clock domain !~async~.
        Bram port B1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__MY_DPRAM_1024x8 failed.
  No acceptable bram resources found.

33. Executing TECHMAP pass (map to technology primitives).

33.1. Executing Verilog-2005 frontend: /home/fizza/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_bram_map.v
Parsing Verilog input from `/home/fizza/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_bram_map.v' to AST representation.
Generating RTLIL representation for module `\$__MY_DPRAM_1024x8'.
Successfully finished Verilog frontend.

33.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

34. Executing OPT pass (performing simple optimizations).

34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module memset.
<suppressed ~110 debug messages>

34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memset'.
Removed a total of 0 cells.

34.3. Executing OPT_DFF pass (perform DFF optimizations).

34.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memset..
Removed 65 unused cells and 16 unused wires.
<suppressed ~68 debug messages>

34.5. Finished fast OPT passes.

35. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

36. Executing OPT pass (performing simple optimizations).

36.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module memset.

36.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memset'.
Removed a total of 0 cells.

36.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memset..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

36.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memset.
Performed a total of 0 changes.

36.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memset'.
Removed a total of 0 cells.

36.6. Executing OPT_DFF pass (perform DFF optimizations).
Handling D = Q on $auto$ff.cc:266:slice$1664 ($_DFF_P_) from module memset (removing D path).
Handling D = Q on $auto$ff.cc:266:slice$1663 ($_DFF_P_) from module memset (removing D path).
Handling D = Q on $auto$ff.cc:266:slice$1662 ($_DFF_P_) from module memset (removing D path).
Handling D = Q on $auto$ff.cc:266:slice$1661 ($_DFF_P_) from module memset (removing D path).
Handling D = Q on $auto$ff.cc:266:slice$1660 ($_DFF_P_) from module memset (removing D path).
Handling D = Q on $auto$ff.cc:266:slice$1659 ($_DFF_P_) from module memset (removing D path).
Handling D = Q on $auto$ff.cc:266:slice$1658 ($_DFF_P_) from module memset (removing D path).
Handling D = Q on $auto$ff.cc:266:slice$1657 ($_DFF_P_) from module memset (removing D path).

36.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memset..

36.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module memset.

36.9. Rerunning OPT passes. (Maybe there is more to do..)

36.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memset..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

36.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memset.
Performed a total of 0 changes.

36.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memset'.
Removed a total of 0 cells.

36.13. Executing OPT_DFF pass (perform DFF optimizations).

36.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memset..

36.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module memset.

36.16. Finished OPT passes. (There is nothing left to do.)

37. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

38. Executing TECHMAP pass (map to technology primitives).

38.1. Executing Verilog-2005 frontend: /home/fizza/OpenFPGA/build/yosys/bin/../share/yosys/adff2dff.v
Parsing Verilog input from `/home/fizza/OpenFPGA/build/yosys/bin/../share/yosys/adff2dff.v' to AST representation.
Generating RTLIL representation for module `\adff2dff'.
Successfully finished Verilog frontend.

38.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

39. Executing OPT_EXPR pass (perform const folding).
Optimizing module memset.

40. Executing SIMPLEMAP pass (map simple cells to gate primitives).

41. Executing OPT_EXPR pass (perform const folding).
Optimizing module memset.

42. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memset'.
Removed a total of 0 cells.

43. Executing OPT_DFF pass (perform DFF optimizations).

44. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memset..

45. Executing OPT pass (performing simple optimizations).

45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module memset.

45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memset'.
Removed a total of 0 cells.

45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memset..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memset.
Performed a total of 0 changes.

45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memset'.
Removed a total of 0 cells.

45.6. Executing OPT_DFF pass (perform DFF optimizations).

45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memset..

45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module memset.

45.9. Finished OPT passes. (There is nothing left to do.)

46. Executing ABC pass (technology mapping using ABC).

46.1. Extracting gate netlist of module `\memset' to `<abc-temp-dir>/input.blif'..
Extracted 734 gates and 1034 wires to a netlist network with 298 inputs and 232 outputs.

46.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

46.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      261
ABC RESULTS:        internal signals:      504
ABC RESULTS:           input signals:      298
ABC RESULTS:          output signals:      232
Removing temp directory.

47. Executing HIERARCHY pass (managing design hierarchy).

47.1. Analyzing design hierarchy..
Top module:  \memset

47.2. Analyzing design hierarchy..
Top module:  \memset
Removed 0 unused modules.

48. Printing statistics.

=== memset ===

   Number of wires:                693
   Number of wire bits:           1899
   Number of public wires:          37
   Number of public wire bits:     579
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                493
     $_DFF_P_                      232
     $lut                          261

49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memset..
Removed 0 unused cells and 631 unused wires.
<suppressed ~17 debug messages>

50. Executing BLIF backend.

Warnings: 7 unique messages, 7 total
End of script. Logfile hash: 3fa95d1e06, CPU: user 1.05s system 0.04s, MEM: 16.99 MB peak
Yosys 0.27+3 (git sha1 b58664d44, gcc 11.3.0-1ubuntu1~22.04 -fPIC -Os)
Time spent: 45% 1x abc (0 sec), 19% 22x opt_expr (0 sec), ...
0