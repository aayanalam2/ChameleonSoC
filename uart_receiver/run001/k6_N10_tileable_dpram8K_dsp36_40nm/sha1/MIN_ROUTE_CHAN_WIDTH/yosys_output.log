/home/fizza/OpenFPGA/build/yosys/bin/yosys yosys.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.27+3 (git sha1 b58664d44, gcc 11.3.0-1ubuntu1~22.04 -fPIC -Os)


-- Executing script file `yosys.ys' --

1. Executing Verilog-2005 frontend: ./benchmark/sha.v
Parsing Verilog input from `./benchmark/sha.v' to AST representation.
Generating RTLIL representation for module `\sha1'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /home/fizza/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_cell_sim.v
Parsing Verilog input from `/home/fizza/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_cell_sim.v' to AST representation.
Generating RTLIL representation for module `\dpram_1024x8_core'.
Generating RTLIL representation for module `\dpram_1024x8'.
Generating RTLIL representation for module `\mult_36'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \sha1

3.2. Analyzing design hierarchy..
Top module:  \sha1
Removed 0 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 4 switch rules as full_case in process $proc$./benchmark/sha.v:2134$38 in module sha1.
Marked 4 switch rules as full_case in process $proc$./benchmark/sha.v:2110$34 in module sha1.
Marked 4 switch rules as full_case in process $proc$./benchmark/sha.v:148$28 in module sha1.
Marked 2 switch rules as full_case in process $proc$./benchmark/sha.v:106$1 in module sha1.
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 0 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~16 debug messages>

4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\sha1.$proc$./benchmark/sha.v:2134$38'.
     1/2: $0\read_counter[2:0]
     2/2: $0\text_o[31:0]
Creating decoders for process `\sha1.$proc$./benchmark/sha.v:2110$34'.
     1/1: $0\Kt[31:0]
Creating decoders for process `\sha1.$proc$./benchmark/sha.v:148$28'.
     1/28: $0\round[6:0]
     2/28: $0\busy[0:0]
     3/28: $0\Wt[31:0]
     4/28: $0\W14[31:0]
     5/28: $0\W13[31:0]
     6/28: $0\W12[31:0]
     7/28: $0\W11[31:0]
     8/28: $0\W10[31:0]
     9/28: $0\W9[31:0]
    10/28: $0\W8[31:0]
    11/28: $0\W7[31:0]
    12/28: $0\W6[31:0]
    13/28: $0\W5[31:0]
    14/28: $0\W4[31:0]
    15/28: $0\W3[31:0]
    16/28: $0\W2[31:0]
    17/28: $0\W1[31:0]
    18/28: $0\W0[31:0]
    19/28: $0\H4[31:0]
    20/28: $0\H3[31:0]
    21/28: $0\H2[31:0]
    22/28: $0\H1[31:0]
    23/28: $0\H0[31:0]
    24/28: $0\E[31:0]
    25/28: $0\D[31:0]
    26/28: $0\C[31:0]
    27/28: $0\B[31:0]
    28/28: $0\A[31:0]
Creating decoders for process `\sha1.$proc$./benchmark/sha.v:106$1'.
     1/3: $0\cmd[3:0] [2]
     2/3: $0\cmd[3:0] [1:0]
     3/3: $0\cmd[3:0] [3]

4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

4.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\sha1.\text_o' using process `\sha1.$proc$./benchmark/sha.v:2134$38'.
  created $dff cell `$procdff$2357' with positive edge clock.
Creating register for signal `\sha1.\read_counter' using process `\sha1.$proc$./benchmark/sha.v:2134$38'.
  created $dff cell `$procdff$2358' with positive edge clock.
Creating register for signal `\sha1.\Kt' using process `\sha1.$proc$./benchmark/sha.v:2110$34'.
  created $dff cell `$procdff$2359' with positive edge clock.
Creating register for signal `\sha1.\A' using process `\sha1.$proc$./benchmark/sha.v:148$28'.
  created $dff cell `$procdff$2360' with positive edge clock.
Creating register for signal `\sha1.\B' using process `\sha1.$proc$./benchmark/sha.v:148$28'.
  created $dff cell `$procdff$2361' with positive edge clock.
Creating register for signal `\sha1.\C' using process `\sha1.$proc$./benchmark/sha.v:148$28'.
  created $dff cell `$procdff$2362' with positive edge clock.
Creating register for signal `\sha1.\D' using process `\sha1.$proc$./benchmark/sha.v:148$28'.
  created $dff cell `$procdff$2363' with positive edge clock.
Creating register for signal `\sha1.\E' using process `\sha1.$proc$./benchmark/sha.v:148$28'.
  created $dff cell `$procdff$2364' with positive edge clock.
Creating register for signal `\sha1.\round' using process `\sha1.$proc$./benchmark/sha.v:148$28'.
  created $dff cell `$procdff$2365' with positive edge clock.
Creating register for signal `\sha1.\H0' using process `\sha1.$proc$./benchmark/sha.v:148$28'.
  created $dff cell `$procdff$2366' with positive edge clock.
Creating register for signal `\sha1.\H1' using process `\sha1.$proc$./benchmark/sha.v:148$28'.
  created $dff cell `$procdff$2367' with positive edge clock.
Creating register for signal `\sha1.\H2' using process `\sha1.$proc$./benchmark/sha.v:148$28'.
  created $dff cell `$procdff$2368' with positive edge clock.
Creating register for signal `\sha1.\H3' using process `\sha1.$proc$./benchmark/sha.v:148$28'.
  created $dff cell `$procdff$2369' with positive edge clock.
Creating register for signal `\sha1.\H4' using process `\sha1.$proc$./benchmark/sha.v:148$28'.
  created $dff cell `$procdff$2370' with positive edge clock.
Creating register for signal `\sha1.\W0' using process `\sha1.$proc$./benchmark/sha.v:148$28'.
  created $dff cell `$procdff$2371' with positive edge clock.
Creating register for signal `\sha1.\W1' using process `\sha1.$proc$./benchmark/sha.v:148$28'.
  created $dff cell `$procdff$2372' with positive edge clock.
Creating register for signal `\sha1.\W2' using process `\sha1.$proc$./benchmark/sha.v:148$28'.
  created $dff cell `$procdff$2373' with positive edge clock.
Creating register for signal `\sha1.\W3' using process `\sha1.$proc$./benchmark/sha.v:148$28'.
  created $dff cell `$procdff$2374' with positive edge clock.
Creating register for signal `\sha1.\W4' using process `\sha1.$proc$./benchmark/sha.v:148$28'.
  created $dff cell `$procdff$2375' with positive edge clock.
Creating register for signal `\sha1.\W5' using process `\sha1.$proc$./benchmark/sha.v:148$28'.
  created $dff cell `$procdff$2376' with positive edge clock.
Creating register for signal `\sha1.\W6' using process `\sha1.$proc$./benchmark/sha.v:148$28'.
  created $dff cell `$procdff$2377' with positive edge clock.
Creating register for signal `\sha1.\W7' using process `\sha1.$proc$./benchmark/sha.v:148$28'.
  created $dff cell `$procdff$2378' with positive edge clock.
Creating register for signal `\sha1.\W8' using process `\sha1.$proc$./benchmark/sha.v:148$28'.
  created $dff cell `$procdff$2379' with positive edge clock.
Creating register for signal `\sha1.\W9' using process `\sha1.$proc$./benchmark/sha.v:148$28'.
  created $dff cell `$procdff$2380' with positive edge clock.
Creating register for signal `\sha1.\W10' using process `\sha1.$proc$./benchmark/sha.v:148$28'.
  created $dff cell `$procdff$2381' with positive edge clock.
Creating register for signal `\sha1.\W11' using process `\sha1.$proc$./benchmark/sha.v:148$28'.
  created $dff cell `$procdff$2382' with positive edge clock.
Creating register for signal `\sha1.\W12' using process `\sha1.$proc$./benchmark/sha.v:148$28'.
  created $dff cell `$procdff$2383' with positive edge clock.
Creating register for signal `\sha1.\W13' using process `\sha1.$proc$./benchmark/sha.v:148$28'.
  created $dff cell `$procdff$2384' with positive edge clock.
Creating register for signal `\sha1.\W14' using process `\sha1.$proc$./benchmark/sha.v:148$28'.
  created $dff cell `$procdff$2385' with positive edge clock.
Creating register for signal `\sha1.\Wt' using process `\sha1.$proc$./benchmark/sha.v:148$28'.
  created $dff cell `$procdff$2386' with positive edge clock.
Creating register for signal `\sha1.\busy' using process `\sha1.$proc$./benchmark/sha.v:148$28'.
  created $dff cell `$procdff$2387' with positive edge clock.
Creating register for signal `\sha1.\cmd' using process `\sha1.$proc$./benchmark/sha.v:106$1'.
  created $dff cell `$procdff$2388' with positive edge clock.

4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 5 empty switches in `\sha1.$proc$./benchmark/sha.v:2134$38'.
Removing empty process `sha1.$proc$./benchmark/sha.v:2134$38'.
Found and cleaned up 4 empty switches in `\sha1.$proc$./benchmark/sha.v:2110$34'.
Removing empty process `sha1.$proc$./benchmark/sha.v:2110$34'.
Found and cleaned up 4 empty switches in `\sha1.$proc$./benchmark/sha.v:148$28'.
Removing empty process `sha1.$proc$./benchmark/sha.v:148$28'.
Found and cleaned up 3 empty switches in `\sha1.$proc$./benchmark/sha.v:106$1'.
Removing empty process `sha1.$proc$./benchmark/sha.v:106$1'.
Cleaned up 16 empty switches.

4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.
<suppressed ~33 debug messages>

5. Executing FLATTEN pass (flatten design).

6. Executing TRIBUF pass.

7. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..
Removed 7 unused cells and 112 unused wires.
<suppressed ~8 debug messages>

9. Executing DEMINOUT pass (demote inout ports to input or output).

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
<suppressed ~4647 debug messages>
Removed a total of 1549 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sha1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sha1.
    New ctrl vector for $pmux cell $procmux$1878: { $procmux$1413_CMP $auto$opt_reduce.cc:134:opt_pmux$2390 $procmux$1879_CMP }
    New ctrl vector for $pmux cell $procmux$777: { $procmux$156_CMP $auto$opt_reduce.cc:134:opt_pmux$2392 }
    New ctrl vector for $pmux cell $procmux$1203: { $procmux$1268_CMP $auto$opt_reduce.cc:134:opt_pmux$2394 }
    New ctrl vector for $pmux cell $procmux$2062: { $procmux$1413_CMP $auto$opt_reduce.cc:134:opt_pmux$2396 $procmux$1879_CMP }
    New ctrl vector for $pmux cell $procmux$564: { $procmux$153_CMP $auto$opt_reduce.cc:134:opt_pmux$2398 }
    New ctrl vector for $pmux cell $procmux$2246: { $procmux$1413_CMP $auto$opt_reduce.cc:134:opt_pmux$2400 $procmux$1879_CMP }
    New ctrl vector for $pmux cell $procmux$351: { $procmux$150_CMP $auto$opt_reduce.cc:134:opt_pmux$2402 }
    New ctrl vector for $pmux cell $procmux$1345: { $procmux$1413_CMP $auto$opt_reduce.cc:134:opt_pmux$2404 }
    New ctrl vector for $pmux cell $procmux$84: { $procmux$1413_CMP $auto$opt_reduce.cc:134:opt_pmux$2406 }
    New ctrl vector for $pmux cell $procmux$848: { $procmux$157_CMP $auto$opt_reduce.cc:134:opt_pmux$2408 }
    New ctrl vector for $pmux cell $procmux$1132: { $procmux$1197_CMP $auto$opt_reduce.cc:134:opt_pmux$2410 }
    New ctrl vector for $pmux cell $procmux$635: { $procmux$154_CMP $auto$opt_reduce.cc:134:opt_pmux$2412 }
    New ctrl vector for $pmux cell $procmux$422: { $procmux$151_CMP $auto$opt_reduce.cc:134:opt_pmux$2414 }
    New ctrl vector for $pmux cell $procmux$1274: { $procmux$1339_CMP $auto$opt_reduce.cc:134:opt_pmux$2416 }
    New ctrl vector for $pmux cell $procmux$1970: { $procmux$1413_CMP $auto$opt_reduce.cc:134:opt_pmux$2418 $procmux$1879_CMP }
    New ctrl vector for $pmux cell $procmux$919: { $procmux$158_CMP $auto$opt_reduce.cc:134:opt_pmux$2420 }
    New ctrl vector for $pmux cell $procmux$2154: { $procmux$1413_CMP $auto$opt_reduce.cc:134:opt_pmux$2422 $procmux$1879_CMP }
    New ctrl vector for $pmux cell $procmux$706: { $procmux$155_CMP $auto$opt_reduce.cc:134:opt_pmux$2424 }
    New ctrl vector for $pmux cell $procmux$262: { $procmux$1413_CMP $auto$opt_reduce.cc:134:opt_pmux$2428 $auto$opt_reduce.cc:134:opt_pmux$2426 }
    New ctrl vector for $pmux cell $procmux$493: { $procmux$152_CMP $auto$opt_reduce.cc:134:opt_pmux$2430 }
    New ctrl vector for $pmux cell $procmux$1061: { $procmux$1126_CMP $auto$opt_reduce.cc:134:opt_pmux$2432 }
    New ctrl vector for $pmux cell $procmux$173: { $procmux$1413_CMP $auto$opt_reduce.cc:134:opt_pmux$2434 }
    New ctrl vector for $pmux cell $procmux$990: { $procmux$1055_CMP $auto$opt_reduce.cc:134:opt_pmux$2436 }
  Optimizing cells in module \sha1.
Performed a total of 23 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
<suppressed ~63 debug messages>
Removed a total of 21 cells.

10.6. Executing OPT_DFF pass (perform DFF optimizations).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..
Removed 0 unused cells and 1570 unused wires.
<suppressed ~1 debug messages>

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

10.9. Rerunning OPT passes. (Maybe there is more to do..)

10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sha1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sha1.
Performed a total of 0 changes.

10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

10.13. Executing OPT_DFF pass (perform DFF optimizations).

10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..

10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

10.16. Finished OPT passes. (There is nothing left to do.)

11. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..

13. Executing CHECK pass (checking for obvious problems).
Checking module sha1...
Found and reported 0 problems.

14. Executing OPT pass (performing simple optimizations).

14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sha1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sha1.
Performed a total of 0 changes.

14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

14.6. Executing OPT_DFF pass (perform DFF optimizations).

14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..

14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

14.9. Finished OPT passes. (There is nothing left to do.)

15. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 7) from port B of cell sha1.$lt$./benchmark/sha.v:131$14 ($lt).
Removed top 1 bits (of 7) from port B of cell sha1.$lt$./benchmark/sha.v:131$15 ($lt).
Removed top 31 bits (of 32) from port B of cell sha1.$add$./benchmark/sha.v:143$27 ($add).
Removed top 25 bits (of 32) from port Y of cell sha1.$add$./benchmark/sha.v:143$27 ($add).
Removed top 1 bits (of 7) from port B of cell sha1.$lt$./benchmark/sha.v:2118$35 ($lt).
Removed top 6 bits (of 7) from port B of cell sha1.$sub$./benchmark/sha.v:2160$41 ($sub).
Removed top 4 bits (of 7) from port Y of cell sha1.$sub$./benchmark/sha.v:2160$41 ($sub).
Removed top 2 bits (of 3) from port B of cell sha1.$procmux$58_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell sha1.$procmux$59_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell sha1.$procmux$60_CMP0 ($eq).
Removed top 1 bits (of 32) from mux cell sha1.$procmux$71 ($mux).
Removed top 3 bits (of 7) from port B of cell sha1.$procmux$149_CMP0 ($eq).
Removed top 3 bits (of 7) from port B of cell sha1.$procmux$150_CMP0 ($eq).
Removed top 3 bits (of 7) from port B of cell sha1.$procmux$151_CMP0 ($eq).
Removed top 3 bits (of 7) from port B of cell sha1.$procmux$152_CMP0 ($eq).
Removed top 3 bits (of 7) from port B of cell sha1.$procmux$153_CMP0 ($eq).
Removed top 3 bits (of 7) from port B of cell sha1.$procmux$154_CMP0 ($eq).
Removed top 3 bits (of 7) from port B of cell sha1.$procmux$155_CMP0 ($eq).
Removed top 3 bits (of 7) from port B of cell sha1.$procmux$156_CMP0 ($eq).
Removed top 4 bits (of 7) from port B of cell sha1.$procmux$157_CMP0 ($eq).
Removed top 4 bits (of 7) from port B of cell sha1.$procmux$158_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1007_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1008_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1009_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1010_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1011_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1012_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1013_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1014_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1015_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1016_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1017_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1018_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1019_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1020_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1021_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1022_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1023_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1024_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1025_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1026_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1027_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1028_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1029_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1030_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1031_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1032_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1033_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1034_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1035_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1036_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1037_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1038_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1039_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1040_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1041_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1042_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1043_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1044_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1045_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1046_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1047_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1048_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1049_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1050_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1051_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1052_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1053_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1054_CMP0 ($eq).
Removed top 4 bits (of 7) from port B of cell sha1.$procmux$1055_CMP0 ($eq).
Removed top 4 bits (of 7) from port B of cell sha1.$procmux$1126_CMP0 ($eq).
Removed top 5 bits (of 7) from port B of cell sha1.$procmux$1197_CMP0 ($eq).
Removed top 5 bits (of 7) from port B of cell sha1.$procmux$1268_CMP0 ($eq).
Removed top 6 bits (of 7) from port B of cell sha1.$procmux$1339_CMP0 ($eq).
Removed top 1 bits (of 32) from wire sha1.$procmux$71_Y.
Removed top 4 bits (of 7) from wire sha1.$sub$./benchmark/sha.v:2160$41_Y.

16. Executing PEEPOPT pass (run peephole optimizers).

17. Executing PMUXTREE pass.

18. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..
Removed 49 unused cells and 81 unused wires.
<suppressed ~50 debug messages>

19. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

20. Executing WREDUCE pass (reducing word size of cells).

21. Executing TECHMAP pass (map to technology primitives).

21.1. Executing Verilog-2005 frontend: /home/fizza/OpenFPGA/build/yosys/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/home/fizza/OpenFPGA/build/yosys/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

21.2. Executing Verilog-2005 frontend: /home/fizza/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_dsp_map.v
Parsing Verilog input from `/home/fizza/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_dsp_map.v' to AST representation.
Generating RTLIL representation for module `\mult_36x36'.
Successfully finished Verilog frontend.

21.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

22. Executing OPT_EXPR pass (perform const folding).

23. Executing WREDUCE pass (reducing word size of cells).
Warning: Selection "Extract" did not match any module.
Warning: Selection "arithmetic" did not match any module.
Warning: Selection "functions" did not match any module.

24. Executing TECHMAP pass (map to technology primitives).

24.1. Executing Verilog-2005 frontend: /home/fizza/OpenFPGA/build/yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/fizza/OpenFPGA/build/yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

24.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $xor.
Running "alumacc" on wrapper $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=6:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=6:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=6:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=7:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=7:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=7:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $mux.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=7:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=7:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=7:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $reduce_or.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=3:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=3:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=3:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $dff.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using template $paramod$103b4016182df467cceab67bcf3e18e6361ec0fd\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$c4905825bb8ecc38b98eb4167e8b007447af7884\_90_alu for cells of type $alu.
Using template $paramod$dbcdc7e8aa1a4080cea2deda6fdc8772064f4d90\_90_alu for cells of type $alu.
Using template $paramod$b8c0a997bce700f23568a5ada79cc6781d1f5ca0\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
No more expansions possible.
<suppressed ~2486 debug messages>

25. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module sha1:
  created 0 $alu and 0 $macc cells.

26. Executing SHARE pass (SAT-based resource sharing).

27. Executing OPT pass (performing simple optimizations).

27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.
<suppressed ~2554 debug messages>

27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
<suppressed ~2913 debug messages>
Removed a total of 971 cells.

27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sha1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sha1.
Performed a total of 0 changes.

27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

27.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$9024 ($_DFF_P_) from module sha1.

27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..
Removed 455 unused cells and 1301 unused wires.
<suppressed ~456 debug messages>

27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.
<suppressed ~5 debug messages>

27.9. Rerunning OPT passes. (Maybe there is more to do..)

27.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sha1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

27.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sha1.
Performed a total of 0 changes.

27.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

27.13. Executing OPT_DFF pass (perform DFF optimizations).

27.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

27.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

27.16. Rerunning OPT passes. (Maybe there is more to do..)

27.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sha1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

27.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sha1.
Performed a total of 0 changes.

27.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

27.20. Executing OPT_DFF pass (perform DFF optimizations).

27.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..

27.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

27.23. Finished OPT passes. (There is nothing left to do.)

28. Executing FSM pass (extract and optimize FSM).

28.1. Executing FSM_DETECT pass (finding FSMs in design).

28.2. Executing FSM_EXTRACT pass (extracting FSM from design).

28.3. Executing FSM_OPT pass (simple optimizations of FSMs).

28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..

28.5. Executing FSM_OPT pass (simple optimizations of FSMs).

28.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

28.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

28.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

29. Executing OPT pass (performing simple optimizations).

29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

29.3. Executing OPT_DFF pass (perform DFF optimizations).

29.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..

29.5. Finished fast OPT passes.

30. Executing MEMORY pass.

30.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

30.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

30.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

30.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

30.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

30.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..

30.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

30.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

30.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..

30.10. Executing MEMORY_COLLECT pass (generating $mem cells).

31. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..

32. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

33. Executing TECHMAP pass (map to technology primitives).

33.1. Executing Verilog-2005 frontend: /home/fizza/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_bram_map.v
Parsing Verilog input from `/home/fizza/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_bram_map.v' to AST representation.
Generating RTLIL representation for module `\$__MY_DPRAM_1024x8'.
Successfully finished Verilog frontend.

33.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

34. Executing OPT pass (performing simple optimizations).

34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

34.3. Executing OPT_DFF pass (perform DFF optimizations).

34.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..

34.5. Finished fast OPT passes.

35. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

36. Executing OPT pass (performing simple optimizations).

36.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

36.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

36.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sha1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

36.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sha1.
Performed a total of 0 changes.

36.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

36.6. Executing OPT_DFF pass (perform DFF optimizations).

36.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..

36.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

36.9. Finished OPT passes. (There is nothing left to do.)

37. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

38. Executing TECHMAP pass (map to technology primitives).

38.1. Executing Verilog-2005 frontend: /home/fizza/OpenFPGA/build/yosys/bin/../share/yosys/adff2dff.v
Parsing Verilog input from `/home/fizza/OpenFPGA/build/yosys/bin/../share/yosys/adff2dff.v' to AST representation.
Generating RTLIL representation for module `\adff2dff'.
Successfully finished Verilog frontend.

38.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

39. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

40. Executing SIMPLEMAP pass (map simple cells to gate primitives).

41. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

42. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

43. Executing OPT_DFF pass (perform DFF optimizations).

44. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..

45. Executing OPT pass (performing simple optimizations).

45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sha1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sha1.
Performed a total of 0 changes.

45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

45.6. Executing OPT_DFF pass (perform DFF optimizations).

45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..

45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

45.9. Finished OPT passes. (There is nothing left to do.)

46. Executing ABC pass (technology mapping using ABC).

46.1. Extracting gate netlist of module `\sha1' to `<abc-temp-dir>/input.blif'..
Extracted 6301 gates and 7233 wires to a netlist network with 930 inputs and 893 outputs.

46.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

46.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:     1591
ABC RESULTS:        internal signals:     5410
ABC RESULTS:           input signals:      930
ABC RESULTS:          output signals:      893
Removing temp directory.

47. Executing HIERARCHY pass (managing design hierarchy).

47.1. Analyzing design hierarchy..
Top module:  \sha1

47.2. Analyzing design hierarchy..
Top module:  \sha1
Removed 0 unused modules.

48. Printing statistics.

=== sha1 ===

   Number of wires:               3863
   Number of wire bits:          10244
   Number of public wires:          48
   Number of public wire bits:    1376
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2484
     $_DFF_P_                      893
     $lut                         1591

49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..
Removed 0 unused cells and 3096 unused wires.
<suppressed ~12 debug messages>

50. Executing BLIF backend.

Warnings: 3 unique messages, 3 total
End of script. Logfile hash: 8236f82d87, CPU: user 12.33s system 0.08s, MEM: 51.88 MB peak
Yosys 0.27+3 (git sha1 b58664d44, gcc 11.3.0-1ubuntu1~22.04 -fPIC -Os)
Time spent: 30% 1x abc (4 sec), 28% 27x opt_expr (4 sec), ...
0