/* Generated by Yosys 0.27+3 (git sha1 b58664d44, gcc 11.3.0-1ubuntu1~22.04 -fPIC -Os) */

module UART_RECEIVER_TOP(i_clk, i_rst, i_dv, r_DATA_SER, \tx_dat[0] , \tx_dat[1] , \tx_dat[2] , \tx_dat[3] , \recv_DATA[0] , \recv_DATA[1] , \recv_DATA[2] , \recv_DATA[3] , t_DATA_SER, rec_done, t_done);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  reg \R_INST.BIT_POS[0] ;
  reg \R_INST.BIT_POS[1] ;
  reg \R_INST.BIT_POS[2] ;
  reg \R_INST.CLK_COUNT[0]  = 1'h0;
  reg \R_INST.CLK_COUNT[1]  = 1'h0;
  reg \R_INST.CLK_COUNT[2]  = 1'h0;
  reg \R_INST.CLK_COUNT[3]  = 1'h0;
  reg \R_INST.CLK_COUNT[4]  = 1'h0;
  reg \R_INST.CLK_COUNT[5]  = 1'h0;
  reg \R_INST.CLK_COUNT[6]  = 1'h0;
  reg \R_INST.CLK_COUNT[7]  = 1'h0;
  reg \R_INST.CLK_COUNT[8]  = 1'h0;
  reg \R_INST.CLK_COUNT[9]  = 1'h0;
  reg \R_INST.DATA_BYTE[0] ;
  reg \R_INST.DATA_BYTE[1] ;
  reg \R_INST.DATA_BYTE[2] ;
  reg \R_INST.DATA_BYTE[3] ;
  reg \R_INST.STATE[0] ;
  reg \R_INST.STATE[1] ;
  reg \R_INST.STATE[2] ;
  input i_clk;
  wire i_clk;
  input i_dv;
  wire i_dv;
  input i_rst;
  wire i_rst;
  wire n102;
  wire n107;
  wire n112;
  wire n117;
  wire n122;
  wire n127;
  wire n132;
  wire n136;
  wire n140;
  wire n144;
  wire n148;
  wire n32;
  wire n37;
  wire n42;
  wire n47;
  wire n52;
  wire n57;
  wire n62;
  wire n67;
  wire n72;
  wire n77;
  wire n82;
  wire n87;
  wire n92;
  wire n97;
  input r_DATA_SER;
  wire r_DATA_SER;
  output rec_done;
  reg rec_done;
  output \recv_DATA[0] ;
  reg \recv_DATA[0] ;
  output \recv_DATA[1] ;
  reg \recv_DATA[1] ;
  output \recv_DATA[2] ;
  reg \recv_DATA[2] ;
  output \recv_DATA[3] ;
  reg \recv_DATA[3] ;
  output t_DATA_SER;
  wire t_DATA_SER;
  output t_done;
  wire t_done;
  input \tx_dat[0] ;
  wire \tx_dat[0] ;
  input \tx_dat[1] ;
  wire \tx_dat[1] ;
  input \tx_dat[2] ;
  wire \tx_dat[2] ;
  input \tx_dat[3] ;
  wire \tx_dat[3] ;
  always @(posedge i_clk)
    \R_INST.STATE[0]  <= n32;
  always @(posedge i_clk)
    \R_INST.CLK_COUNT[6]  <= n77;
  always @(posedge i_clk)
    \R_INST.CLK_COUNT[7]  <= n82;
  always @(posedge i_clk)
    \R_INST.CLK_COUNT[8]  <= n87;
  always @(posedge i_clk)
    \R_INST.CLK_COUNT[9]  <= n92;
  always @(posedge i_clk)
    \R_INST.BIT_POS[0]  <= n97;
  always @(posedge i_clk)
    \R_INST.BIT_POS[1]  <= n102;
  always @(posedge i_clk)
    \R_INST.BIT_POS[2]  <= n107;
  always @(posedge i_clk)
    \R_INST.DATA_BYTE[0]  <= n112;
  always @(posedge i_clk)
    \R_INST.DATA_BYTE[1]  <= n117;
  always @(posedge i_clk)
    \R_INST.DATA_BYTE[2]  <= n122;
  always @(posedge i_clk)
    \R_INST.STATE[1]  <= n37;
  always @(posedge i_clk)
    \R_INST.DATA_BYTE[3]  <= n127;
  always @(posedge i_clk)
    rec_done <= n132;
  always @(posedge i_clk)
    \recv_DATA[0]  <= n136;
  always @(posedge i_clk)
    \recv_DATA[1]  <= n140;
  always @(posedge i_clk)
    \recv_DATA[2]  <= n144;
  always @(posedge i_clk)
    \recv_DATA[3]  <= n148;
  always @(posedge i_clk)
    \R_INST.STATE[2]  <= n42;
  always @(posedge i_clk)
    \R_INST.CLK_COUNT[0]  <= n47;
  always @(posedge i_clk)
    \R_INST.CLK_COUNT[1]  <= n52;
  always @(posedge i_clk)
    \R_INST.CLK_COUNT[2]  <= n57;
  always @(posedge i_clk)
    \R_INST.CLK_COUNT[3]  <= n62;
  always @(posedge i_clk)
    \R_INST.CLK_COUNT[4]  <= n67;
  always @(posedge i_clk)
    \R_INST.CLK_COUNT[5]  <= n72;
  assign n37 = 32'd4169662464 >> { i_rst, _012_, \R_INST.STATE[1] , \R_INST.STATE[2] , _016_ };
  assign _012_ = 8'h0b >> { _015_, _013_, _014_ };
  assign _013_ = 64'h1000000000000000 >> { \R_INST.CLK_COUNT[6] , \R_INST.CLK_COUNT[8] , \R_INST.CLK_COUNT[9] , \R_INST.CLK_COUNT[5] , \R_INST.CLK_COUNT[4] , \R_INST.CLK_COUNT[7]  };
  assign _014_ = 16'h0007 >> { \R_INST.CLK_COUNT[3] , \R_INST.CLK_COUNT[2] , \R_INST.CLK_COUNT[0] , \R_INST.CLK_COUNT[1]  };
  assign _015_ = 64'hff80000000000000 >> { \R_INST.CLK_COUNT[9] , \R_INST.CLK_COUNT[8] , \R_INST.CLK_COUNT[7] , \R_INST.CLK_COUNT[6] , \R_INST.CLK_COUNT[4] , \R_INST.CLK_COUNT[5]  };
  assign _016_ = 32'd4093640704 >> { _017_, \R_INST.BIT_POS[2] , _015_, _013_, _014_ };
  assign _017_ = 4'h8 >> { \R_INST.BIT_POS[0] , \R_INST.BIT_POS[1]  };
  assign n32 = 8'hbf >> { i_rst, _018_, _020_ };
  assign _018_ = 16'h40ff >> { \R_INST.STATE[0] , _013_, _019_, r_DATA_SER };
  assign _019_ = 16'h1000 >> { \R_INST.CLK_COUNT[0] , \R_INST.CLK_COUNT[1] , \R_INST.CLK_COUNT[2] , \R_INST.CLK_COUNT[3]  };
  assign _020_ = 16'hf400 >> { \R_INST.STATE[1] , _015_, _013_, _014_ };
  assign n42 = 32'd2408054784 >> { i_rst, \R_INST.STATE[2] , _016_, _022_, _021_ };
  assign _021_ = 4'h8 >> { _013_, _019_ };
  assign _022_ = 4'h4 >> { \R_INST.STATE[0] , r_DATA_SER };
  assign n97 = 64'hf3ff77ff0f000000 >> { \R_INST.BIT_POS[0] , \R_INST.STATE[2] , i_rst, _012_, _018_, \R_INST.STATE[0]  };
  assign n102 = 64'hdfff5f5f30000000 >> { \R_INST.BIT_POS[1] , \R_INST.STATE[2] , \R_INST.BIT_POS[0] , _023_, _012_, _018_ };
  assign _023_ = 8'he0 >> { i_rst, \R_INST.STATE[2] , \R_INST.STATE[0]  };
  assign n47 = 16'h3500 >> { i_rst, \R_INST.CLK_COUNT[0] , _026_, _024_ };
  assign _024_ = 32'd65524 >> { _022_, _015_, _025_, _013_, _014_ };
  assign _025_ = 4'h1 >> { \R_INST.STATE[2] , \R_INST.STATE[1]  };
  assign _026_ = 32'd264175616 >> { _027_, _015_, \R_INST.STATE[1] , _013_, _014_ };
  assign _027_ = 16'h0fee >> { \R_INST.STATE[0] , r_DATA_SER, \R_INST.STATE[2] , \R_INST.STATE[1]  };
  assign n52 = 32'd1462763520 >> { i_rst, \R_INST.CLK_COUNT[1] , \R_INST.CLK_COUNT[0] , _024_, _026_ };
  assign _028_ = 32'd4010737664 >> { \R_INST.CLK_COUNT[2] , \R_INST.STATE[1] , _027_, _015_, _013_ };
  assign _029_ = 32'd4043243758 >> { _013_, _022_, _019_, _025_, _015_ };
  assign _030_ = 8'h80 >> { \R_INST.CLK_COUNT[2] , \R_INST.CLK_COUNT[0] , \R_INST.CLK_COUNT[1]  };
  assign n62 = 32'd1462763520 >> { i_rst, \R_INST.CLK_COUNT[3] , _030_, _024_, _026_ };
  assign n67 = 32'd1462763520 >> { i_rst, \R_INST.CLK_COUNT[4] , _031_, _024_, _026_ };
  assign _031_ = 4'h8 >> { _030_, \R_INST.CLK_COUNT[3]  };
  assign _032_ = 32'd65359 >> { \R_INST.STATE[1] , _015_, \R_INST.STATE[2] , _013_, _014_ };
  assign _033_ = 8'hb4 >> { \R_INST.CLK_COUNT[5] , _034_, _015_ };
  assign _034_ = 32'd2147483648 >> { \R_INST.CLK_COUNT[4] , \R_INST.CLK_COUNT[2] , \R_INST.CLK_COUNT[0] , \R_INST.CLK_COUNT[3] , \R_INST.CLK_COUNT[1]  };
  assign _000_ = 64'h8000000000000000 >> { \R_INST.CLK_COUNT[4] , \R_INST.CLK_COUNT[2] , \R_INST.CLK_COUNT[0] , \R_INST.CLK_COUNT[3] , \R_INST.CLK_COUNT[1] , \R_INST.CLK_COUNT[5]  };
  assign _001_ = 8'h41 >> { \R_INST.CLK_COUNT[6] , _000_, _015_ };
  assign _002_ = 64'haaaa0000efefcf00 >> { _015_, \R_INST.STATE[1] , \R_INST.STATE[2] , _013_, _014_, \R_INST.CLK_COUNT[6]  };
  assign n82 = 32'd1028390912 >> { i_rst, _003_, _026_, \R_INST.CLK_COUNT[7] , _024_ };
  assign _003_ = 16'hb000 >> { _000_, \R_INST.CLK_COUNT[6] , _015_, _022_ };
  assign n87 = 64'hff00ff00ff00b000 >> { _005_, _020_, i_rst, _006_, _032_, _004_ };
  assign _004_ = 8'h70 >> { _022_, _013_, _019_ };
  assign _005_ = 4'h4 >> { \R_INST.CLK_COUNT[8] , _027_ };
  assign _006_ = 16'h7f80 >> { \R_INST.CLK_COUNT[8] , _000_, \R_INST.CLK_COUNT[7] , \R_INST.CLK_COUNT[6]  };
  assign n92 = 64'h55dfcf0000000000 >> { i_rst, \R_INST.CLK_COUNT[9] , _007_, _032_, _004_, _026_ };
  assign _007_ = 16'h8000 >> { _000_, \R_INST.CLK_COUNT[7] , \R_INST.CLK_COUNT[6] , \R_INST.CLK_COUNT[8]  };
  assign n112 = 32'd4278125056 >> { \R_INST.DATA_BYTE[0] , _008_, \R_INST.BIT_POS[0] , \R_INST.BIT_POS[1] , r_DATA_SER };
  assign _008_ = 8'h40 >> { i_rst, \R_INST.STATE[2] , \R_INST.BIT_POS[2]  };
  assign n117 = 32'd4026474496 >> { \R_INST.DATA_BYTE[1] , _008_, \R_INST.BIT_POS[0] , \R_INST.BIT_POS[1] , r_DATA_SER };
  assign n122 = 32'd4026474496 >> { \R_INST.DATA_BYTE[2] , _008_, \R_INST.BIT_POS[1] , \R_INST.BIT_POS[0] , r_DATA_SER };
  assign n127 = 16'haccc >> { _017_, _008_, \R_INST.DATA_BYTE[3] , r_DATA_SER };
  assign n136 = 16'hca00 >> { i_rst, _020_, \R_INST.DATA_BYTE[0] , \recv_DATA[0]  };
  assign n140 = 16'hca00 >> { i_rst, _020_, \R_INST.DATA_BYTE[1] , \recv_DATA[1]  };
  assign n144 = 16'hca00 >> { i_rst, _020_, \R_INST.DATA_BYTE[2] , \recv_DATA[2]  };
  assign n148 = 16'hca00 >> { i_rst, _020_, \R_INST.DATA_BYTE[3] , \recv_DATA[3]  };
  assign n132 = 64'hff3f550000000000 >> { i_rst, rec_done, \R_INST.STATE[1] , _021_, _022_, _012_ };
  assign _009_ = 16'hf400 >> { _017_, _015_, _013_, _014_ };
  assign n107 = 64'h7f773333f0000000 >> { \R_INST.BIT_POS[2] , i_rst, \R_INST.STATE[2] , _009_, _023_, _018_ };
  assign n57 = 64'haabfaaea00000000 >> { i_rst, \R_INST.CLK_COUNT[2] , _029_, \R_INST.CLK_COUNT[0] , \R_INST.CLK_COUNT[1] , _028_ };
  assign _010_ = 64'h00f8ff8fffff0000 >> { \R_INST.STATE[0] , \R_INST.CLK_COUNT[5] , r_DATA_SER, _034_, _013_, _019_ };
  assign n72 = 64'h0caeff0c00000000 >> { i_rst, _010_, \R_INST.STATE[0] , _032_, _033_, _025_ };
  assign _011_ = 64'h00f8ff8fffff0000 >> { \R_INST.STATE[0] , \R_INST.CLK_COUNT[6] , r_DATA_SER, _000_, _013_, _019_ };
  assign n77 = 64'h0caeff0c00000000 >> { i_rst, _011_, \R_INST.STATE[0] , _001_, _002_, _025_ };
  assign _035_ = 1'hx;
  assign t_done = _035_;
  assign t_DATA_SER = _035_;
endmodule
