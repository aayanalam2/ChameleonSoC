/home/fizza/OpenFPGA/build/yosys/bin/yosys yosys.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.27+3 (git sha1 b58664d44, gcc 11.3.0-1ubuntu1~22.04 -fPIC -Os)


-- Executing script file `yosys.ys' --

1. Executing Verilog-2005 frontend: ./benchmark/uart_receiver.v
Parsing Verilog input from `./benchmark/uart_receiver.v' to AST representation.
Generating RTLIL representation for module `\UART_RECEIVER_TOP'.
Generating RTLIL representation for module `\UART_RECEIVER'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \UART_RECEIVER_TOP
Used module:     \UART_RECEIVER

2.2. Analyzing design hierarchy..
Top module:  \UART_RECEIVER_TOP
Used module:     \UART_RECEIVER
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 7 switch rules as full_case in process $proc$./benchmark/uart_receiver.v:42$5 in module UART_RECEIVER.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 8 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\UART_RECEIVER.$proc$./benchmark/uart_receiver.v:40$38'.
  Set init value: \CLK_COUNT = 10'0000000000

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~7 debug messages>

3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\UART_RECEIVER.$proc$./benchmark/uart_receiver.v:40$38'.
Creating decoders for process `\UART_RECEIVER.$proc$./benchmark/uart_receiver.v:42$5'.
     1/17: $3\RECV_DONE[0:0]
     2/17: $3\RECV_DATA[3:0]
     3/17: $2$lookahead\DATA_BYTE$4[7:0]$18
     4/17: $2$bitselwrite$sel$./benchmark/uart_receiver.v:77$3[2:0]$17
     5/17: $2$bitselwrite$data$./benchmark/uart_receiver.v:77$2[7:0]$16
     6/17: $2$bitselwrite$mask$./benchmark/uart_receiver.v:77$1[7:0]$15
     7/17: $2\RECV_DONE[0:0]
     8/17: $2\RECV_DATA[3:0]
     9/17: $1\RECV_DONE[0:0]
    10/17: $1\RECV_DATA[3:0]
    11/17: $1$lookahead\DATA_BYTE$4[7:0]$14
    12/17: $1$bitselwrite$sel$./benchmark/uart_receiver.v:77$3[2:0]$13
    13/17: $1$bitselwrite$data$./benchmark/uart_receiver.v:77$2[7:0]$12
    14/17: $1$bitselwrite$mask$./benchmark/uart_receiver.v:77$1[7:0]$11
    15/17: $0\CLK_COUNT[9:0]
    16/17: $0\STATE[1:0]
    17/17: $0\BIT_POS[2:0]

3.8. Executing PROC_DLATCH pass (convert process syncs to latches).

3.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\UART_RECEIVER.\RECV_DATA' using process `\UART_RECEIVER.$proc$./benchmark/uart_receiver.v:42$5'.
  created $dff cell `$procdff$191' with positive edge clock.
Creating register for signal `\UART_RECEIVER.\RECV_DONE' using process `\UART_RECEIVER.$proc$./benchmark/uart_receiver.v:42$5'.
  created $dff cell `$procdff$192' with positive edge clock.
Creating register for signal `\UART_RECEIVER.\DATA_BYTE' using process `\UART_RECEIVER.$proc$./benchmark/uart_receiver.v:42$5'.
  created $dff cell `$procdff$193' with positive edge clock.
Creating register for signal `\UART_RECEIVER.\BIT_POS' using process `\UART_RECEIVER.$proc$./benchmark/uart_receiver.v:42$5'.
  created $dff cell `$procdff$194' with positive edge clock.
Creating register for signal `\UART_RECEIVER.\STATE' using process `\UART_RECEIVER.$proc$./benchmark/uart_receiver.v:42$5'.
  created $dff cell `$procdff$195' with positive edge clock.
Creating register for signal `\UART_RECEIVER.\CLK_COUNT' using process `\UART_RECEIVER.$proc$./benchmark/uart_receiver.v:42$5'.
  created $dff cell `$procdff$196' with positive edge clock.
Creating register for signal `\UART_RECEIVER.$bitselwrite$mask$./benchmark/uart_receiver.v:77$1' using process `\UART_RECEIVER.$proc$./benchmark/uart_receiver.v:42$5'.
  created $dff cell `$procdff$197' with positive edge clock.
Creating register for signal `\UART_RECEIVER.$bitselwrite$data$./benchmark/uart_receiver.v:77$2' using process `\UART_RECEIVER.$proc$./benchmark/uart_receiver.v:42$5'.
  created $dff cell `$procdff$198' with positive edge clock.
Creating register for signal `\UART_RECEIVER.$bitselwrite$sel$./benchmark/uart_receiver.v:77$3' using process `\UART_RECEIVER.$proc$./benchmark/uart_receiver.v:42$5'.
  created $dff cell `$procdff$199' with positive edge clock.
Creating register for signal `\UART_RECEIVER.$lookahead\DATA_BYTE$4' using process `\UART_RECEIVER.$proc$./benchmark/uart_receiver.v:42$5'.
  created $dff cell `$procdff$200' with positive edge clock.

3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `UART_RECEIVER.$proc$./benchmark/uart_receiver.v:40$38'.
Found and cleaned up 7 empty switches in `\UART_RECEIVER.$proc$./benchmark/uart_receiver.v:42$5'.
Removing empty process `UART_RECEIVER.$proc$./benchmark/uart_receiver.v:42$5'.
Cleaned up 7 empty switches.

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module UART_RECEIVER.
<suppressed ~27 debug messages>
Optimizing module UART_RECEIVER_TOP.

4. Executing TECHMAP pass (map to technology primitives).

4.1. Executing Verilog-2005 frontend: /home/fizza/OpenFPGA/build/yosys/bin/../share/yosys/adff2dff.v
Parsing Verilog input from `/home/fizza/OpenFPGA/build/yosys/bin/../share/yosys/adff2dff.v' to AST representation.
Generating RTLIL representation for module `\adff2dff'.
Successfully finished Verilog frontend.

4.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

5. Executing FLATTEN pass (flatten design).
Deleting now unused module UART_RECEIVER.
<suppressed ~1 debug messages>

6. Executing OPT_EXPR pass (perform const folding).
Optimizing module UART_RECEIVER_TOP.
<suppressed ~2 debug messages>

7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_RECEIVER_TOP..
Removed 18 unused cells and 80 unused wires.
<suppressed ~21 debug messages>

8. Executing CHECK pass (checking for obvious problems).
Checking module UART_RECEIVER_TOP...
Warning: Wire UART_RECEIVER_TOP.\t_done is used but has no driver.
Warning: Wire UART_RECEIVER_TOP.\t_DATA_SER is used but has no driver.
Found and reported 2 problems.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module UART_RECEIVER_TOP.

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UART_RECEIVER_TOP'.
<suppressed ~45 debug messages>
Removed a total of 15 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UART_RECEIVER_TOP..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $flatten\R_INST.$procmux$106.
    dead port 2/2 on $mux $flatten\R_INST.$procmux$43.
    dead port 2/2 on $mux $flatten\R_INST.$procmux$46.
    dead port 2/2 on $mux $flatten\R_INST.$procmux$52.
    dead port 2/2 on $mux $flatten\R_INST.$procmux$55.
    dead port 2/2 on $mux $flatten\R_INST.$procmux$62.
    dead port 2/2 on $mux $flatten\R_INST.$procmux$96.
Removed 7 multiplexer ports.
<suppressed ~6 debug messages>

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UART_RECEIVER_TOP.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UART_RECEIVER_TOP'.
Removed a total of 0 cells.

9.6. Executing OPT_DFF pass (perform DFF optimizations).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_RECEIVER_TOP..
Removed 0 unused cells and 22 unused wires.
<suppressed ~1 debug messages>

9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module UART_RECEIVER_TOP.

9.9. Rerunning OPT passes. (Maybe there is more to do..)

9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UART_RECEIVER_TOP..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UART_RECEIVER_TOP.
Performed a total of 0 changes.

9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UART_RECEIVER_TOP'.
Removed a total of 0 cells.

9.13. Executing OPT_DFF pass (perform DFF optimizations).

9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_RECEIVER_TOP..

9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module UART_RECEIVER_TOP.

9.16. Finished OPT passes. (There is nothing left to do.)

10. Executing FSM pass (extract and optimize FSM).

10.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register UART_RECEIVER_TOP.R_INST.STATE.

10.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\R_INST.STATE' from module `\UART_RECEIVER_TOP'.
  found $dff cell for state register: $flatten\R_INST.$procdff$195
  root of input selection tree: $flatten\R_INST.$0\STATE[1:0]
  found reset state: 2'00 (guessed from mux tree)
  found ctrl input: \i_rst
  found state code: 2'00
  found ctrl input: $flatten\R_INST.$procmux$100_CMP
  found ctrl input: $flatten\R_INST.$procmux$137_CMP
  found ctrl input: $flatten\R_INST.$procmux$144_CMP
  found ctrl input: $flatten\R_INST.$lt$./benchmark/uart_receiver.v:101$36_Y
  found state code: 2'10
  found ctrl input: $flatten\R_INST.$lt$./benchmark/uart_receiver.v:85$34_Y
  found state code: 2'01
  found ctrl input: \r_DATA_SER
  found ctrl input: $flatten\R_INST.$eq$./benchmark/uart_receiver.v:63$20_Y
  found ctrl output: $flatten\R_INST.$procmux$144_CMP
  found ctrl output: $flatten\R_INST.$procmux$137_CMP
  found ctrl output: $flatten\R_INST.$procmux$100_CMP
  ctrl inputs: { $flatten\R_INST.$eq$./benchmark/uart_receiver.v:63$20_Y $flatten\R_INST.$lt$./benchmark/uart_receiver.v:85$34_Y $flatten\R_INST.$lt$./benchmark/uart_receiver.v:101$36_Y \r_DATA_SER \i_rst }
  ctrl outputs: { $flatten\R_INST.$0\STATE[1:0] $flatten\R_INST.$procmux$100_CMP $flatten\R_INST.$procmux$137_CMP $flatten\R_INST.$procmux$144_CMP }
  transition:       2'00 5'----0 ->       2'00 5'00001
  transition:       2'00 5'0--01 ->       2'00 5'00001
  transition:       2'00 5'1--01 ->       2'01 5'01001
  transition:       2'00 5'---11 ->       2'00 5'00001
  transition:       2'10 5'----0 ->       2'00 5'00100
  transition:       2'10 5'--0-1 ->       2'00 5'00100
  transition:       2'10 5'--1-1 ->       2'10 5'10100
  transition:       2'01 5'----0 ->       2'00 5'00010
  transition:       2'01 5'-00-1 ->       2'10 5'10010
  transition:       2'01 5'-10-1 ->       2'01 5'01010
  transition:       2'01 5'--1-1 ->       2'01 5'01010

10.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\R_INST.STATE$204' from module `\UART_RECEIVER_TOP'.

10.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_RECEIVER_TOP..
Removed 11 unused cells and 11 unused wires.
<suppressed ~12 debug messages>

10.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\R_INST.STATE$204' from module `\UART_RECEIVER_TOP'.
  Removing unused output signal $flatten\R_INST.$0\STATE[1:0] [0].
  Removing unused output signal $flatten\R_INST.$0\STATE[1:0] [1].

10.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\R_INST.STATE$204' from module `\UART_RECEIVER_TOP' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  00 -> --1
  10 -> -1-
  01 -> 1--

10.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\R_INST.STATE$204' from module `UART_RECEIVER_TOP':
-------------------------------------

  Information on FSM $fsm$\R_INST.STATE$204 (\R_INST.STATE):

  Number of input signals:    5
  Number of output signals:   3
  Number of state bits:       3

  Input signals:
    0: \i_rst
    1: \r_DATA_SER
    2: $flatten\R_INST.$lt$./benchmark/uart_receiver.v:101$36_Y
    3: $flatten\R_INST.$lt$./benchmark/uart_receiver.v:85$34_Y
    4: $flatten\R_INST.$eq$./benchmark/uart_receiver.v:63$20_Y

  Output signals:
    0: $flatten\R_INST.$procmux$144_CMP
    1: $flatten\R_INST.$procmux$137_CMP
    2: $flatten\R_INST.$procmux$100_CMP

  State encoding:
    0:      3'--1  <RESET STATE>
    1:      3'-1-
    2:      3'1--

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 5'----0   ->     0 3'001
      1:     0 5'0--01   ->     0 3'001
      2:     0 5'---11   ->     0 3'001
      3:     0 5'1--01   ->     2 3'001
      4:     1 5'----0   ->     0 3'100
      5:     1 5'--0-1   ->     0 3'100
      6:     1 5'--1-1   ->     1 3'100
      7:     2 5'----0   ->     0 3'010
      8:     2 5'-00-1   ->     1 3'010
      9:     2 5'-10-1   ->     2 3'010
     10:     2 5'--1-1   ->     2 3'010

-------------------------------------

10.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\R_INST.STATE$204' from module `\UART_RECEIVER_TOP'.

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module UART_RECEIVER_TOP.
<suppressed ~1 debug messages>

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UART_RECEIVER_TOP'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UART_RECEIVER_TOP..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UART_RECEIVER_TOP.
Performed a total of 0 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UART_RECEIVER_TOP'.
Removed a total of 0 cells.

11.6. Executing OPT_DFF pass (perform DFF optimizations).

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_RECEIVER_TOP..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module UART_RECEIVER_TOP.

11.9. Rerunning OPT passes. (Maybe there is more to do..)

11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UART_RECEIVER_TOP..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UART_RECEIVER_TOP.
Performed a total of 0 changes.

11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UART_RECEIVER_TOP'.
Removed a total of 0 cells.

11.13. Executing OPT_DFF pass (perform DFF optimizations).

11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_RECEIVER_TOP..

11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module UART_RECEIVER_TOP.

11.16. Finished OPT passes. (There is nothing left to do.)

12. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 3) from port B of cell UART_RECEIVER_TOP.$auto$fsm_map.cc:77:implement_pattern_cache$216 ($eq).
Removed top 2 bits (of 3) from port B of cell UART_RECEIVER_TOP.$auto$fsm_map.cc:77:implement_pattern_cache$229 ($eq).
Removed top 1 bits (of 2) from port B of cell UART_RECEIVER_TOP.$auto$fsm_map.cc:77:implement_pattern_cache$224 ($eq).
Removed top 31 bits (of 32) from port B of cell UART_RECEIVER_TOP.$flatten\R_INST.$add$./benchmark/uart_receiver.v:103$37 ($add).
Removed top 22 bits (of 32) from port Y of cell UART_RECEIVER_TOP.$flatten\R_INST.$add$./benchmark/uart_receiver.v:103$37 ($add).
Removed top 22 bits (of 32) from port B of cell UART_RECEIVER_TOP.$flatten\R_INST.$lt$./benchmark/uart_receiver.v:101$36 ($lt).
Removed top 31 bits (of 32) from port B of cell UART_RECEIVER_TOP.$flatten\R_INST.$add$./benchmark/uart_receiver.v:87$35 ($add).
Removed top 29 bits (of 32) from port Y of cell UART_RECEIVER_TOP.$flatten\R_INST.$add$./benchmark/uart_receiver.v:87$35 ($add).
Removed top 29 bits (of 32) from port B of cell UART_RECEIVER_TOP.$flatten\R_INST.$lt$./benchmark/uart_receiver.v:85$34 ($lt).
Removed top 28 bits (of 32) from port A of cell UART_RECEIVER_TOP.$flatten\R_INST.$neg$./benchmark/uart_receiver.v:0$23 ($neg).
Converting cell UART_RECEIVER_TOP.$flatten\R_INST.$neg$./benchmark/uart_receiver.v:0$23 ($neg) from signed to unsigned.
Removed top 1 bits (of 4) from port A of cell UART_RECEIVER_TOP.$flatten\R_INST.$neg$./benchmark/uart_receiver.v:0$23 ($neg).
Removed top 22 bits (of 32) from wire UART_RECEIVER_TOP.$flatten\R_INST.$add$./benchmark/uart_receiver.v:103$37_Y.
Removed top 29 bits (of 32) from wire UART_RECEIVER_TOP.$flatten\R_INST.$add$./benchmark/uart_receiver.v:87$35_Y.

13. Executing PEEPOPT pass (run peephole optimizers).

14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_RECEIVER_TOP..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

15. Executing OPT pass (performing simple optimizations).

15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module UART_RECEIVER_TOP.

15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UART_RECEIVER_TOP'.
Removed a total of 0 cells.

15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UART_RECEIVER_TOP..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UART_RECEIVER_TOP.
Performed a total of 0 changes.

15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UART_RECEIVER_TOP'.
Removed a total of 0 cells.

15.6. Executing OPT_DFF pass (perform DFF optimizations).

15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_RECEIVER_TOP..

15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module UART_RECEIVER_TOP.

15.9. Finished OPT passes. (There is nothing left to do.)

16. Executing MEMORY pass.

16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_RECEIVER_TOP..

16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_RECEIVER_TOP..

16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_RECEIVER_TOP..

18. Executing OPT pass (performing simple optimizations).

18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module UART_RECEIVER_TOP.
<suppressed ~3 debug messages>

18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UART_RECEIVER_TOP'.
Removed a total of 0 cells.

18.3. Executing OPT_DFF pass (perform DFF optimizations).

18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_RECEIVER_TOP..

18.5. Finished fast OPT passes.

19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

20. Executing OPT pass (performing simple optimizations).

20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module UART_RECEIVER_TOP.

20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UART_RECEIVER_TOP'.
Removed a total of 0 cells.

20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UART_RECEIVER_TOP..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UART_RECEIVER_TOP.
Performed a total of 0 changes.

20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UART_RECEIVER_TOP'.
Removed a total of 0 cells.

20.6. Executing OPT_SHARE pass.

20.7. Executing OPT_DFF pass (perform DFF optimizations).

20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_RECEIVER_TOP..

20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module UART_RECEIVER_TOP.

20.10. Finished OPT passes. (There is nothing left to do.)

21. Executing TECHMAP pass (map to technology primitives).

21.1. Executing Verilog-2005 frontend: /home/fizza/OpenFPGA/build/yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/fizza/OpenFPGA/build/yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$32e7c4d6f92ff4337599ece53082d2e88a82a9f2\_90_pmux for cells of type $pmux.
Using template $paramod$effaf36432c334223db2ff0ecd7fefb10188d957\_90_pmux for cells of type $pmux.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=10:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=10:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=10:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=10:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=10:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=10:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=10:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=10:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=10:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=3:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=3:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=3:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=3:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=3:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=3:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $or.
Using template $paramod$constmap:104da9d1db7a1a3d3040fc47e9181bb90c2db772$paramod$21dee603dc19e4530a14795556c80eafcc4f26b8\_90_shift_shiftx for cells of type $shift.
Analyzing pattern of constant bits for this cell:
  Constant input on bit 0 of port A: 1'1
Creating constmapped module `$paramod$constmap:53f81d327ce76cbf6a8a98434119a90a4847620f$paramod$21dee603dc19e4530a14795556c80eafcc4f26b8\_90_shift_shiftx'.

21.22. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:53f81d327ce76cbf6a8a98434119a90a4847620f$paramod$21dee603dc19e4530a14795556c80eafcc4f26b8\_90_shift_shiftx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$674.
    dead port 2/2 on $mux $procmux$668.
    dead port 2/2 on $mux $procmux$662.
    dead port 2/2 on $mux $procmux$656.
Removed 4 multiplexer ports.
<suppressed ~456 debug messages>

21.23. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:53f81d327ce76cbf6a8a98434119a90a4847620f$paramod$21dee603dc19e4530a14795556c80eafcc4f26b8\_90_shift_shiftx.
<suppressed ~29 debug messages>
Removed 0 unused cells and 9 unused wires.
Using template $paramod$constmap:53f81d327ce76cbf6a8a98434119a90a4847620f$paramod$21dee603dc19e4530a14795556c80eafcc4f26b8\_90_shift_shiftx for cells of type $shift.
Running "alumacc" on wrapper $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=3:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=3:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=3:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$754650b284649a026620fc6856e5b6886cbfe794\_90_alu for cells of type $alu.
Using template $paramod$484d51534650924b7ed4c69e46eed3a56904771f\_90_alu for cells of type $alu.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using template $paramod$78e969f2586efcf3a5b0b0440bcca0db83d5cca2\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$117a422dd91271f31dcbd629d7b52dc0eb1e49ab\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001010 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
No more expansions possible.
<suppressed ~889 debug messages>

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module UART_RECEIVER_TOP.
<suppressed ~763 debug messages>

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UART_RECEIVER_TOP'.
<suppressed ~429 debug messages>
Removed a total of 143 cells.

22.3. Executing OPT_DFF pass (perform DFF optimizations).

22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_RECEIVER_TOP..
Removed 79 unused cells and 583 unused wires.
<suppressed ~80 debug messages>

22.5. Finished fast OPT passes.

23. Executing ABC pass (technology mapping using ABC).

23.1. Extracting gate netlist of module `\UART_RECEIVER_TOP' to `<abc-temp-dir>/input.blif'..
Extracted 344 gates and 373 wires to a netlist network with 27 inputs and 25 outputs.

23.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

23.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       60
ABC RESULTS:        internal signals:      321
ABC RESULTS:           input signals:       27
ABC RESULTS:          output signals:       25
Removing temp directory.

24. Executing SYNTH pass.

24.1. Executing HIERARCHY pass (managing design hierarchy).

24.1.1. Analyzing design hierarchy..
Top module:  \UART_RECEIVER_TOP

24.1.2. Analyzing design hierarchy..
Top module:  \UART_RECEIVER_TOP
Removed 0 unused modules.

24.2. Printing statistics.

=== UART_RECEIVER_TOP ===

   Number of wires:                253
   Number of wire bits:            890
   Number of public wires:          18
   Number of public wire bits:      47
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 85
     $_DFF_P_                       25
     $lut                           60

24.3. Executing CHECK pass (checking for obvious problems).
Checking module UART_RECEIVER_TOP...
Found and reported 0 problems.

25. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_RECEIVER_TOP..
Removed 0 unused cells and 180 unused wires.
<suppressed ~6 debug messages>

26. Executing BLIF backend.

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 460efae7cd, CPU: user 0.40s system 0.02s, MEM: 23.48 MB peak
Yosys 0.27+3 (git sha1 b58664d44, gcc 11.3.0-1ubuntu1~22.04 -fPIC -Os)
Time spent: 37% 1x abc (0 sec), 17% 2x techmap (0 sec), ...
0